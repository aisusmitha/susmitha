{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Ex2U8uN2v0fo"},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FIYC2Mqev39a"},"outputs":[],"source":["import numpy as np"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6dbjYi05v6-5"},"outputs":[],"source":["import matplotlib.pyplot as plt\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xEWlFXyGv_4d"},"outputs":[],"source":["import seaborn as sns"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_jlbqGCPwC47"},"outputs":[],"source":["df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"executionInfo":{"elapsed":118,"status":"ok","timestamp":1707483904546,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"3w1Asmo-xCgj","outputId":"63a24111-dd1e-4c0a-b230-b6f140ed8017"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   CustomerId   Surname  CreditScore Geography  Gender  Age  Tenure  \\\n","0    15634602  Hargrave          619    France  Female   42       2   \n","1    15647311      Hill          608     Spain  Female   41       1   \n","2    15619304      Onio          502    France  Female   42       8   \n","3    15701354      Boni          699    France  Female   39       1   \n","4    15737888  Mitchell          850     Spain  Female   43       2   \n","\n","     Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0       0.00                1                1                 1   \n","1   83807.86                1                0                 1   \n","2  159660.80                3                1                 0   \n","3       0.00                2                0                 0   \n","4  125510.82                1                1                 1   \n","\n","   Estimated Salary  Churn  \n","0         101348.88      1  \n","1         112542.58      0  \n","2         113931.57      1  \n","3          93826.63      0  \n","4          79084.10      0  "],"text/html":["\n","  <div id=\"df-f157d8ce-b8a0-4eef-9936-ea1481042137\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CustomerId</th>\n","      <th>Surname</th>\n","      <th>CreditScore</th>\n","      <th>Geography</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Tenure</th>\n","      <th>Balance</th>\n","      <th>Num Of Products</th>\n","      <th>Has Credit Card</th>\n","      <th>Is Active Member</th>\n","      <th>Estimated Salary</th>\n","      <th>Churn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15634602</td>\n","      <td>Hargrave</td>\n","      <td>619</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>42</td>\n","      <td>2</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>101348.88</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15647311</td>\n","      <td>Hill</td>\n","      <td>608</td>\n","      <td>Spain</td>\n","      <td>Female</td>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>83807.86</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>112542.58</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15619304</td>\n","      <td>Onio</td>\n","      <td>502</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>42</td>\n","      <td>8</td>\n","      <td>159660.80</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113931.57</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15701354</td>\n","      <td>Boni</td>\n","      <td>699</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>39</td>\n","      <td>1</td>\n","      <td>0.00</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>93826.63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15737888</td>\n","      <td>Mitchell</td>\n","      <td>850</td>\n","      <td>Spain</td>\n","      <td>Female</td>\n","      <td>43</td>\n","      <td>2</td>\n","      <td>125510.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>79084.10</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f157d8ce-b8a0-4eef-9936-ea1481042137')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f157d8ce-b8a0-4eef-9936-ea1481042137 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f157d8ce-b8a0-4eef-9936-ea1481042137');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-78a7fa7f-70a4-480e-9b93-2197d05f5b35\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-78a7fa7f-70a4-480e-9b93-2197d05f5b35')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-78a7fa7f-70a4-480e-9b93-2197d05f5b35 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":114,"status":"ok","timestamp":1707483904547,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"Y934fikcxJN_","outputId":"62601857-30a3-4d77-9847-a49a6643e0ed"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10000 entries, 0 to 9999\n","Data columns (total 13 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   CustomerId        10000 non-null  int64  \n"," 1   Surname           10000 non-null  object \n"," 2   CreditScore       10000 non-null  int64  \n"," 3   Geography         10000 non-null  object \n"," 4   Gender            10000 non-null  object \n"," 5   Age               10000 non-null  int64  \n"," 6   Tenure            10000 non-null  int64  \n"," 7   Balance           10000 non-null  float64\n"," 8   Num Of Products   10000 non-null  int64  \n"," 9   Has Credit Card   10000 non-null  int64  \n"," 10  Is Active Member  10000 non-null  int64  \n"," 11  Estimated Salary  10000 non-null  float64\n"," 12  Churn             10000 non-null  int64  \n","dtypes: float64(2), int64(8), object(3)\n","memory usage: 1015.8+ KB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":102,"status":"ok","timestamp":1707483904547,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"C-70DyVBxw-p","outputId":"fd36ef70-37f4-4de0-ea0e-8beecbdae809"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn'],\n","      dtype='object')"]},"metadata":{},"execution_count":8}],"source":["df.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":97,"status":"ok","timestamp":1707483904548,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"oxvbLTXexN0l","outputId":"3a8e7856-3846-48d6-f5ab-e89188f17d75"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":9}],"source":["df.duplicated('CustomerId').sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":89,"status":"ok","timestamp":1707483904549,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"ZzTVhrLeyeIn","outputId":"280b26f4-70ea-4872-a13e-3a409ada1953"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10000 entries, 0 to 9999\n","Data columns (total 13 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   CustomerId        10000 non-null  int64  \n"," 1   Surname           10000 non-null  object \n"," 2   CreditScore       10000 non-null  int64  \n"," 3   Geography         10000 non-null  object \n"," 4   Gender            10000 non-null  object \n"," 5   Age               10000 non-null  int64  \n"," 6   Tenure            10000 non-null  int64  \n"," 7   Balance           10000 non-null  float64\n"," 8   Num Of Products   10000 non-null  int64  \n"," 9   Has Credit Card   10000 non-null  int64  \n"," 10  Is Active Member  10000 non-null  int64  \n"," 11  Estimated Salary  10000 non-null  float64\n"," 12  Churn             10000 non-null  int64  \n","dtypes: float64(2), int64(8), object(3)\n","memory usage: 1015.8+ KB\n"]}],"source":["df.info()"]},{"cell_type":"markdown","metadata":{"id":"L1Hg-ntwy9Z9"},"source":["# ENCODING"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":87,"status":"ok","timestamp":1707483904554,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"Yq-y6Xa-zEtC","outputId":"fe298624-cd3f-4f43-9a65-7d7071bc53b8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["France     5014\n","Germany    2509\n","Spain      2477\n","Name: Geography, dtype: int64"]},"metadata":{},"execution_count":11}],"source":["df['Geography'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H5nrNSUKzWyf"},"outputs":[],"source":["df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":81,"status":"ok","timestamp":1707483904557,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"zKEzmkx7yiP-","outputId":"811a662f-91a8-4b62-e228-4e6b032320bb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method IndexOpsMixin.value_counts of 0       Female\n","1       Female\n","2       Female\n","3       Female\n","4       Female\n","         ...  \n","9995      Male\n","9996      Male\n","9997    Female\n","9998      Male\n","9999    Female\n","Name: Gender, Length: 10000, dtype: object>"]},"metadata":{},"execution_count":13}],"source":["df['Gender'].value_counts"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NI-aIdjy0EhE"},"outputs":[],"source":["df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":80,"status":"ok","timestamp":1707483904564,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"CsMeDesH080a","outputId":"61ce0f25-22e6-47bd-bd19-a4a1f07ca17c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    5084\n","2    4590\n","3     266\n","4      60\n","Name: Num Of Products, dtype: int64"]},"metadata":{},"execution_count":15}],"source":["df['Num Of Products'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fk82abL_0c52"},"outputs":[],"source":["df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":72,"status":"ok","timestamp":1707483904564,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"Bz4u0lRJ1_Ab","outputId":"a3ab565f-bacd-4acc-a237-505cf97a4fc0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    7055\n","0    2945\n","Name: Has Credit Card, dtype: int64"]},"metadata":{},"execution_count":17}],"source":["df['Has Credit Card'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":67,"status":"ok","timestamp":1707483904565,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"HHqKfdly2Tvc","outputId":"8fae0a6e-9f82-4a15-ff42-a08022682493"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    5151\n","0    4849\n","Name: Is Active Member, dtype: int64"]},"metadata":{},"execution_count":18}],"source":["df['Is Active Member'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":62,"status":"ok","timestamp":1707483904567,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"Q5wUHKBU2fTs","outputId":"4b2656fa-2f12-4035-93cd-11a6c27674fe"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    3117\n","1     500\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":19}],"source":["df.loc[(df['Balance']==0),'Churn'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BgUZN9Gd26B3"},"outputs":[],"source":["df['Zero Balance']=np.where(df['Balance']>0,1,0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"elapsed":2468,"status":"ok","timestamp":1707483906981,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"-2sbPda63Ngf","outputId":"7e74301e-00ac-4878-8036-e55acd2abb85"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":21},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["df['Zero Balance'].hist()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":304},"executionInfo":{"elapsed":85,"status":"ok","timestamp":1707483906983,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"GLgSTOKj3a_j","outputId":"a51316ae-3470-4ef2-8368-8aae3fefcb78"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 CustomerId  Surname  CreditScore  Gender   Age  Tenure  \\\n","Churn Geography                                                           \n","0     0                2064     2064         2064    2064  2064    2064   \n","      1                1695     1695         1695    1695  1695    1695   \n","      2                4204     4204         4204    4204  4204    4204   \n","1     0                 413      413          413     413   413     413   \n","      1                 814      814          814     814   814     814   \n","      2                 810      810          810     810   810     810   \n","\n","                 Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","Churn Geography                                                                \n","0     0             2064             2064             2064              2064   \n","      1             1695             1695             1695              1695   \n","      2             4204             4204             4204              4204   \n","1     0              413              413              413               413   \n","      1              814              814              814               814   \n","      2              810              810              810               810   \n","\n","                 Estimated Salary  Zero Balance  \n","Churn Geography                                  \n","0     0                      2064          2064  \n","      1                      1695          1695  \n","      2                      4204          4204  \n","1     0                       413           413  \n","      1                       814           814  \n","      2                       810           810  "],"text/html":["\n","  <div id=\"df-9732358b-2f78-4cf1-b81d-a290ec7b8504\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>CustomerId</th>\n","      <th>Surname</th>\n","      <th>CreditScore</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Tenure</th>\n","      <th>Balance</th>\n","      <th>Num Of Products</th>\n","      <th>Has Credit Card</th>\n","      <th>Is Active Member</th>\n","      <th>Estimated Salary</th>\n","      <th>Zero Balance</th>\n","    </tr>\n","    <tr>\n","      <th>Churn</th>\n","      <th>Geography</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">0</th>\n","      <th>0</th>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","      <td>2064</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","      <td>1695</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","      <td>4204</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">1</th>\n","      <th>0</th>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>413</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","      <td>814</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","      <td>810</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9732358b-2f78-4cf1-b81d-a290ec7b8504')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9732358b-2f78-4cf1-b81d-a290ec7b8504 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9732358b-2f78-4cf1-b81d-a290ec7b8504');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8902f7b6-8c44-4088-be86-e0857c23c01a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8902f7b6-8c44-4088-be86-e0857c23c01a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8902f7b6-8c44-4088-be86-e0857c23c01a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":22}],"source":["df.groupby(['Churn','Geography']).count()"]},{"cell_type":"markdown","metadata":{"id":"e8hU7iIJ4Erd"},"source":["Define Lable and Features"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":81,"status":"ok","timestamp":1707483906984,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"PWwjvycD4WJh","outputId":"d3ae995c-84e6-444e-de84-1def4c2efe0d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn', 'Zero Balance'],\n","      dtype='object')"]},"metadata":{},"execution_count":23}],"source":["df.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T4CGdD_C4dsW"},"outputs":[],"source":["x=df.drop(['Surname','Churn'],axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j1lgXTb44s8c"},"outputs":[],"source":["y=df['Churn']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":73,"status":"ok","timestamp":1707483906987,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"pHQw6EQk41xG","outputId":"dd07e2c9-f938-4342-d7eb-a61d4ce26fe4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((10000, 12), (10000,))"]},"metadata":{},"execution_count":26}],"source":["x.shape,y.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":69,"status":"ok","timestamp":1707483906988,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"_g2DbXHG5KTH","outputId":"3bb04245-3828-4018-874a-bf85ee6bf0c8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    7963\n","1    2037\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":27}],"source":["df['Churn'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"elapsed":62,"status":"ok","timestamp":1707483906989,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"N0NiJmU-52g-","outputId":"23f07d1d-6627-4a1d-dd60-d7a5b89b1324"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["sns.countplot(x='Churn',data=df);"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":59,"status":"ok","timestamp":1707483906991,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"RbPoLAq66EUi","outputId":"6b28837b-78b3-4eab-e7d0-ca4403e151c0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((10000, 12), (10000,))"]},"metadata":{},"execution_count":29}],"source":["x.shape,y.shape"]},{"cell_type":"markdown","metadata":{"id":"P6Q8ag0f4Tdp"},"source":["Random Under Sampling"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7570,"status":"ok","timestamp":1707483914509,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"b027RtO472xU","outputId":"e1f830fc-12d1-4183-9502-016421798e11"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting imblearn\n","  Downloading imblearn-0.0-py2.py3-none-any.whl (1.9 kB)\n","Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (from imblearn) (0.10.1)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.23.5)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.11.4)\n","Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.2.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (3.2.0)\n","Installing collected packages: imblearn\n","Successfully installed imblearn-0.0\n"]}],"source":["!pip install imblearn"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_05SNbq94RFr"},"outputs":[],"source":["from imblearn.under_sampling import RandomUnderSampler"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Iya2aQPM39_g"},"outputs":[],"source":["rus=RandomUnderSampler(random_state=2529)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cKwdpUnD8-Jl"},"outputs":[],"source":["x_rus,y_rus=rus.fit_resample(x,y)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":67,"status":"ok","timestamp":1707483916158,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"3cT1vnIU9LL9","outputId":"abfe8627-e7c8-4469-fa7c-18ae30181c72"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((4074, 12), (4074,), (10000, 12), (10000,))"]},"metadata":{},"execution_count":34}],"source":["x_rus.shape,y_rus.shape,x.shape,y.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":67,"status":"ok","timestamp":1707483916160,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"xKbxjjjP9WUc","outputId":"662c7a0b-da13-4f5a-8298-f351e486f802"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    7963\n","1    2037\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":35}],"source":["y.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":59,"status":"ok","timestamp":1707483916163,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"8K4zc8G39cZk","outputId":"612787e6-165e-4c96-8a33-05d9bc9ed07e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    2037\n","1    2037\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":36}],"source":["y_rus.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"elapsed":53,"status":"ok","timestamp":1707483916164,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"BQXpfHOw9jeu","outputId":"65cbab0f-5a97-499f-8e9c-6c7a333a4290"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='Frequency'>"]},"metadata":{},"execution_count":37},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["y_rus.plot(kind='hist')"]},{"cell_type":"markdown","metadata":{"id":"qF8416MnL_H6"},"source":["Random Over Sampling"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5361,"status":"ok","timestamp":1707483921484,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"TyiGDaFxMfDb","outputId":"292f6850-23a5-4cd4-8f3f-152793e284f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Name: imblearn\n","Version: 0.0\n","Summary: Toolbox for imbalanced dataset in machine learning.\n","Home-page: https://pypi.python.org/pypi/imbalanced-learn/\n","Author: UNKNOWN\n","Author-email: UNKNOWN\n","License: UNKNOWN\n","Location: /usr/local/lib/python3.10/dist-packages\n","Requires: imbalanced-learn\n","Required-by: \n"]}],"source":["!pip show imblearn"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QA-sDouG9uTL"},"outputs":[],"source":["from imblearn.over_sampling import RandomOverSampler"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mV5FF9EIMztZ"},"outputs":[],"source":["ros=RandomOverSampler(random_state=2529)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IKyJXQ94M9y2"},"outputs":[],"source":["x_ros,y_ros=ros.fit_resample(x,y)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45,"status":"ok","timestamp":1707483921488,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"-gqZlsAONHzH","outputId":"b2358a2e-10f6-447a-d252-673ecbfd3b4f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((15926, 12), (15926,), (10000, 12), (10000,))"]},"metadata":{},"execution_count":42}],"source":["x_ros.shape,y_ros.shape,x.shape,y.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":38,"status":"ok","timestamp":1707483921488,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"miH5D0UeNQ1b","outputId":"cbb326d1-de62-457b-cdc7-b026a1e9b443"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    7963\n","1    2037\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":43}],"source":["y.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1707483921489,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"I689_PhINdol","outputId":"fc6a41b6-c543-49a8-d622-cbe4dbffcaba"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    7963\n","0    7963\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":44}],"source":["y_ros.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"elapsed":1671,"status":"ok","timestamp":1707483923135,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"XicQ_SXLNyrR","outputId":"3327e217-d0de-4bf0-937c-538ad9fad396"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='Frequency'>"]},"metadata":{},"execution_count":45},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["y_ros.plot(kind='hist')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TYcztJ5-OIRX"},"outputs":[],"source":["from sklearn.model_selection import train_test_split"]},{"cell_type":"markdown","metadata":{"id":"sGgf-zNYOFpw"},"source":["Split Original Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NydTb-t7Oa0Z"},"outputs":[],"source":["x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=25)"]},{"cell_type":"markdown","metadata":{"id":"-qt_UtNvOuhK"},"source":["Split Random Under Sample Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wNWKVri7O1Wf"},"outputs":[],"source":["x_train_rus,x_test_rus,y_train_rus,y_test_rus=train_test_split(x_rus,y_rus,test_size=0.3,random_state=25)"]},{"cell_type":"markdown","metadata":{"id":"7jjrhNEjPjQ5"},"source":["Split Random OVer Sample Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GiXie9sePqWa"},"outputs":[],"source":["x_train_ros,x_test_ros,y_train_ros,y_test_ros=train_test_split(x_ros,y_ros,test_size=0.3,random_state=25)"]},{"cell_type":"markdown","metadata":{"id":"QfqY0ZRwQSwh"},"source":["Standardize Features"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q8nxHBYkQLe_"},"outputs":[],"source":["from sklearn.preprocessing import StandardScaler"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fTnR0bGPSHsL"},"outputs":[],"source":["sc=StandardScaler()"]},{"cell_type":"markdown","metadata":{"id":"vSXBnEYPQKX0"},"source":["Standardize Original Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A2--P6BdQG2o"},"outputs":[],"source":["x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vi50OZWwTn0D"},"outputs":[],"source":["x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])"]},{"cell_type":"markdown","metadata":{"id":"0VmmMy2xUay2"},"source":["Standardize Random Under Sample Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TXw0QuaRUfpU"},"outputs":[],"source":["x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D_ZS6IV9UleJ"},"outputs":[],"source":["x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])"]},{"cell_type":"markdown","metadata":{"id":"VQBZcRYRWXUb"},"source":["Standardize Random Over Sample Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EwAIbDdjWqFQ"},"outputs":[],"source":["x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g_KYconAXRM1"},"outputs":[],"source":["x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])"]},{"cell_type":"markdown","metadata":{"id":"383CeMH4YKzH"},"source":["Support Vector Machine Classifier"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oxAZu2RyYZRP"},"outputs":[],"source":["from sklearn.svm import SVC"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HJJ-ondNYhnl"},"outputs":[],"source":["svc=SVC()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"executionInfo":{"elapsed":881,"status":"ok","timestamp":1707483923982,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"SjlhSTF-YlCh","outputId":"d89677b9-4e77-47d6-c306-f06d73e0a67b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":60}],"source":["svc.fit(x_train,y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XhUt7ozlYrp8"},"outputs":[],"source":["y_pred=svc.predict(x_test)"]},{"cell_type":"markdown","metadata":{"id":"ew-oVzYqY6d4"},"source":["Model Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5bqQcCPOY-9P"},"outputs":[],"source":["from sklearn.metrics import confusion_matrix,classification_report"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1707483925377,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"RutIej8EZPwp","outputId":"e4aab3bd-7a2f-40f5-d861-c6d5f96dbb91"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2419,    0],\n","       [ 581,    0]])"]},"metadata":{},"execution_count":63}],"source":["confusion_matrix(y_test,y_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1707483925378,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"OdVpMwuLZWkn","outputId":"3eef1094-43ba-4466-b29c-53b69ce8df66"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.81      1.00      0.89      2419\n","           1       0.00      0.00      0.00       581\n","\n","    accuracy                           0.81      3000\n","   macro avg       0.40      0.50      0.45      3000\n","weighted avg       0.65      0.81      0.72      3000\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(classification_report(y_test,y_pred))"]},{"cell_type":"markdown","metadata":{"id":"sEYpsicfZtvl"},"source":["Hyper Parameter Tuning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fp5pytBvZzc5"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hBgKjm1caLHh"},"outputs":[],"source":["param_grid={'C':[0.1,1,10,],\n","                'gamma':[1,0.1,0.01],\n","            'kernel':['rbf'],\n","            'class_weight':['balanced']}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"elapsed":49787,"status":"ok","timestamp":1707483975145,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"DXCmPDkZbh2f","outputId":"ddc38980-2254-4324-9c08-82a10f1aac95"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 9 candidates, totalling 18 fits\n","[CV] END ..C=0.1, class_weight=balanced, gamma=1, kernel=rbf; total time=   1.5s\n","[CV] END ..C=0.1, class_weight=balanced, gamma=1, kernel=rbf; total time=   1.4s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   1.7s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   2.0s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   2.1s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   1.7s\n","[CV] END ....C=1, class_weight=balanced, gamma=1, kernel=rbf; total time=   1.6s\n","[CV] END ....C=1, class_weight=balanced, gamma=1, kernel=rbf; total time=   1.6s\n","[CV] END ..C=1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   1.6s\n","[CV] END ..C=1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   1.6s\n","[CV] END .C=1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   4.8s\n","[CV] END .C=1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   3.8s\n","[CV] END ...C=10, class_weight=balanced, gamma=1, kernel=rbf; total time=   4.3s\n","[CV] END ...C=10, class_weight=balanced, gamma=1, kernel=rbf; total time=   5.4s\n","[CV] END .C=10, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   3.6s\n","[CV] END .C=10, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   3.8s\n","[CV] END C=10, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   2.3s\n","[CV] END C=10, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   2.1s\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [0.1, 1, 10], &#x27;class_weight&#x27;: [&#x27;balanced&#x27;],\n","                         &#x27;gamma&#x27;: [1, 0.1, 0.01], &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n","             verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [0.1, 1, 10], &#x27;class_weight&#x27;: [&#x27;balanced&#x27;],\n","                         &#x27;gamma&#x27;: [1, 0.1, 0.01], &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n","             verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":67}],"source":["grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\n","grid.fit(x_train,y_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1707483975146,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"ynKdej--cF3d","outputId":"0b868447-ebab-461b-c001-0e1aff9e0b89"},"outputs":[{"output_type":"stream","name":"stdout","text":["SVC(C=1, class_weight='balanced', gamma=1)\n"]}],"source":["print(grid.best_estimator_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Tk9_lC_ZcNo0"},"outputs":[],"source":["grid_predictions=grid.predict(x_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1707483976382,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"6yRfHfsLcVj7","outputId":"d3208acf-0a89-4086-9eb8-14fb4c780ae2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2419,    0],\n","       [ 581,    0]])"]},"metadata":{},"execution_count":70}],"source":["confusion_matrix(y_test,grid_predictions)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1707483976383,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"HTPRHbggcdXL","outputId":"ef7a5ba1-b716-4081-81ce-ef202be310d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.81      1.00      0.89      2419\n","           1       0.00      0.00      0.00       581\n","\n","    accuracy                           0.81      3000\n","   macro avg       0.40      0.50      0.45      3000\n","weighted avg       0.65      0.81      0.72      3000\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(classification_report(y_test,grid_predictions))"]},{"cell_type":"markdown","metadata":{"id":"rFOXrw8Vcx09"},"source":["Model With Random Under Sampling"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zvq92hMYc6LI"},"outputs":[],"source":["svc_rus=SVC()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"executionInfo":{"elapsed":1601,"status":"ok","timestamp":1707483977970,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"yb1IZ5F8c_Kn","outputId":"d367c099-638e-4b4a-c4c0-963a45b60100"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC()"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":73}],"source":["svc_rus.fit(x_train_rus,y_train_rus)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hk0pm_AZdIJ-"},"outputs":[],"source":["y_pred_rus=svc_rus.predict(x_test_rus)"]},{"cell_type":"markdown","metadata":{"id":"FhjuajwodUTz"},"source":["Model Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":89,"status":"ok","timestamp":1707483977975,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"9QMzNSojdb37","outputId":"5d1eb576-5cfa-46a8-9a90-57564a303a28"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[603,   0],\n","       [620,   0]])"]},"metadata":{},"execution_count":75}],"source":["confusion_matrix(y_test_rus,y_pred_rus)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":82,"status":"ok","timestamp":1707483977978,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"X2WqaTiNdmbH","outputId":"5429fce6-fb48-409c-a778-415ffddef997"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.49      1.00      0.66       603\n","           1       0.00      0.00      0.00       620\n","\n","    accuracy                           0.49      1223\n","   macro avg       0.25      0.50      0.33      1223\n","weighted avg       0.24      0.49      0.33      1223\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(classification_report(y_test_rus,y_pred_rus))"]},{"cell_type":"markdown","metadata":{"id":"GMGzWMO7d0ID"},"source":["Hyper Parameter Tuning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QrFvzVFWd6MR"},"outputs":[],"source":["param_grid={'C':[0.1,1,10],\n","            'gamma':[1,0.1,0.01],\n","            'kernel':['rbf'],\n","            'class_weight':['balanced']}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wCOzOCyUIIDa"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"83jVqvRSITo_"},"outputs":[],"source":["from sklearn.svm import SVC"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":74,"status":"ok","timestamp":1707483977985,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"K9Zl6HAlI6fV","outputId":"f741123e-17b7-47c1-ab8f-47436db75f2c"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'__name__': '__main__', '__doc__': 'Automatically created module for IPython interactive environment', '__package__': None, '__loader__': None, '__spec__': None, '__builtin__': <module 'builtins' (built-in)>, '__builtins__': <module 'builtins' (built-in)>, '_ih': ['', 'import pandas as pd', 'import numpy as np', 'import matplotlib.pyplot as plt', 'import seaborn as sns', \"df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')\", 'df.head()', 'df.info()', 'df.columns', \"df.duplicated('CustomerId').sum()\", 'df.info()', \"df['Geography'].value_counts()\", \"df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)\", \"df['Gender'].value_counts\", \"df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)\", \"df['Num Of Products'].value_counts()\", \"df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace=True)\", \"df['Has Credit Card'].value_counts()\", \"df['Is Active Member'].value_counts()\", \"df.loc[(df['Balance']==0),'Churn'].value_counts()\", \"df['Zero Balance']=np.where(df['Balance']>0,1,0)\", \"df['Zero Balance'].hist()\", \"df.groupby(['Churn','Geography']).count()\", 'df.columns', \"x=df.drop(['Surname','Churn'],axis=1)\", \"y=df['Churn']\", 'x.shape,y.shape', \"df['Churn'].value_counts()\", \"sns.countplot(x='Churn',data=df);\", 'x.shape,y.shape', \"get_ipython().system('pip install imblearn')\", 'from imblearn.under_sampling import RandomUnderSampler', 'rus=RandomUnderSampler(random_state=2529)', 'x_rus,y_rus=rus.fit_resample(x,y)', 'x_rus.shape,y_rus.shape,x.shape,y.shape', 'y.value_counts()', 'y_rus.value_counts()', \"y_rus.plot(kind='hist')\", \"get_ipython().system('pip show imblearn')\", 'from imblearn.over_sampling import RandomOverSampler', 'ros=RandomOverSampler(random_state=2529)', 'x_ros,y_ros=ros.fit_resample(x,y)', 'x_ros.shape,y_ros.shape,x.shape,y.shape', 'y.value_counts()', 'y_ros.value_counts()', \"y_ros.plot(kind='hist')\", 'from sklearn.model_selection import train_test_split', 'x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=25)', 'x_train_rus,x_test_rus,y_train_rus,y_test_rus=train_test_split(x_rus,y_rus,test_size=0.3,random_state=25)', 'x_train_ros,x_test_ros,y_train_ros,y_test_ros=train_test_split(x_ros,y_ros,test_size=0.3,random_state=25)', 'from sklearn.preprocessing import StandardScaler', 'sc=StandardScaler()', \"x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", 'from sklearn.svm import SVC', 'svc=SVC()', 'svc.fit(x_train,y_train)', 'y_pred=svc.predict(x_test)', 'from sklearn.metrics import confusion_matrix,classification_report', 'confusion_matrix(y_test,y_pred)', 'print(classification_report(y_test,y_pred))', 'from sklearn.model_selection import GridSearchCV', \"param_grid={'C':[0.1,1,10,],\\n                'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid.fit(x_train,y_train)', 'print(grid.best_estimator_)', 'grid_predictions=grid.predict(x_test)', 'confusion_matrix(y_test,grid_predictions)', 'print(classification_report(y_test,grid_predictions))', 'svc_rus=SVC()', 'svc_rus.fit(x_train_rus,y_train_rus)', 'y_pred_rus=svc_rus.predict(x_test_rus)', 'confusion_matrix(y_test_rus,y_pred_rus)', 'print(classification_report(y_test_rus,y_pred_rus))', \"param_grid={'C':[0.1,1,10],\\n            'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'from sklearn.model_selection import GridSearchCV', 'from sklearn.svm import SVC', 'print (locals())'], '_oh': {6:    CustomerId   Surname  CreditScore Geography  Gender  Age  Tenure  \\\n","0    15634602  Hargrave          619    France  Female   42       2   \n","1    15647311      Hill          608     Spain  Female   41       1   \n","2    15619304      Onio          502    France  Female   42       8   \n","3    15701354      Boni          699    France  Female   39       1   \n","4    15737888  Mitchell          850     Spain  Female   43       2   \n","\n","     Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0       0.00                1                1                 1   \n","1   83807.86                1                0                 1   \n","2  159660.80                3                1                 0   \n","3       0.00                2                0                 0   \n","4  125510.82                1                1                 1   \n","\n","   Estimated Salary  Churn  \n","0         101348.88      1  \n","1         112542.58      0  \n","2         113931.57      1  \n","3          93826.63      0  \n","4          79084.10      0  , 8: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn'],\n","      dtype='object'), 9: 0, 11: France     5014\n","Germany    2509\n","Spain      2477\n","Name: Geography, dtype: int64, 13: <bound method IndexOpsMixin.value_counts of 0       Female\n","1       Female\n","2       Female\n","3       Female\n","4       Female\n","         ...  \n","9995      Male\n","9996      Male\n","9997    Female\n","9998      Male\n","9999    Female\n","Name: Gender, Length: 10000, dtype: object>, 15: 1    5084\n","2    4590\n","3     266\n","4      60\n","Name: Num Of Products, dtype: int64, 17: 1    7055\n","0    2945\n","Name: Has Credit Card, dtype: int64, 18: 1    5151\n","0    4849\n","Name: Is Active Member, dtype: int64, 19: 0    3117\n","1     500\n","Name: Churn, dtype: int64, 21: <Axes: >, 22:                  CustomerId  Surname  CreditScore  Gender   Age  Tenure  \\\n","Churn Geography                                                           \n","0     0                2064     2064         2064    2064  2064    2064   \n","      1                1695     1695         1695    1695  1695    1695   \n","      2                4204     4204         4204    4204  4204    4204   \n","1     0                 413      413          413     413   413     413   \n","      1                 814      814          814     814   814     814   \n","      2                 810      810          810     810   810     810   \n","\n","                 Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","Churn Geography                                                                \n","0     0             2064             2064             2064              2064   \n","      1             1695             1695             1695              1695   \n","      2             4204             4204             4204              4204   \n","1     0              413              413              413               413   \n","      1              814              814              814               814   \n","      2              810              810              810               810   \n","\n","                 Estimated Salary  Zero Balance  \n","Churn Geography                                  \n","0     0                      2064          2064  \n","      1                      1695          1695  \n","      2                      4204          4204  \n","1     0                       413           413  \n","      1                       814           814  \n","      2                       810           810  , 23: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn', 'Zero Balance'],\n","      dtype='object'), 26: ((10000, 12), (10000,)), 27: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 29: ((10000, 12), (10000,)), 34: ((4074, 12), (4074,), (10000, 12), (10000,)), 35: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 36: 0    2037\n","1    2037\n","Name: Churn, dtype: int64, 37: <Axes: ylabel='Frequency'>, 42: ((15926, 12), (15926,), (10000, 12), (10000,)), 43: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 44: 1    7963\n","0    7963\n","Name: Churn, dtype: int64, 45: <Axes: ylabel='Frequency'>, 60: SVC(), 63: array([[2419,    0],\n","       [ 581,    0]]), 67: GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), 70: array([[2419,    0],\n","       [ 581,    0]]), 73: SVC(), 75: array([[603,   0],\n","       [620,   0]])}, '_dh': ['/content'], 'In': ['', 'import pandas as pd', 'import numpy as np', 'import matplotlib.pyplot as plt', 'import seaborn as sns', \"df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')\", 'df.head()', 'df.info()', 'df.columns', \"df.duplicated('CustomerId').sum()\", 'df.info()', \"df['Geography'].value_counts()\", \"df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)\", \"df['Gender'].value_counts\", \"df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)\", \"df['Num Of Products'].value_counts()\", \"df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace=True)\", \"df['Has Credit Card'].value_counts()\", \"df['Is Active Member'].value_counts()\", \"df.loc[(df['Balance']==0),'Churn'].value_counts()\", \"df['Zero Balance']=np.where(df['Balance']>0,1,0)\", \"df['Zero Balance'].hist()\", \"df.groupby(['Churn','Geography']).count()\", 'df.columns', \"x=df.drop(['Surname','Churn'],axis=1)\", \"y=df['Churn']\", 'x.shape,y.shape', \"df['Churn'].value_counts()\", \"sns.countplot(x='Churn',data=df);\", 'x.shape,y.shape', \"get_ipython().system('pip install imblearn')\", 'from imblearn.under_sampling import RandomUnderSampler', 'rus=RandomUnderSampler(random_state=2529)', 'x_rus,y_rus=rus.fit_resample(x,y)', 'x_rus.shape,y_rus.shape,x.shape,y.shape', 'y.value_counts()', 'y_rus.value_counts()', \"y_rus.plot(kind='hist')\", \"get_ipython().system('pip show imblearn')\", 'from imblearn.over_sampling import RandomOverSampler', 'ros=RandomOverSampler(random_state=2529)', 'x_ros,y_ros=ros.fit_resample(x,y)', 'x_ros.shape,y_ros.shape,x.shape,y.shape', 'y.value_counts()', 'y_ros.value_counts()', \"y_ros.plot(kind='hist')\", 'from sklearn.model_selection import train_test_split', 'x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=25)', 'x_train_rus,x_test_rus,y_train_rus,y_test_rus=train_test_split(x_rus,y_rus,test_size=0.3,random_state=25)', 'x_train_ros,x_test_ros,y_train_ros,y_test_ros=train_test_split(x_ros,y_ros,test_size=0.3,random_state=25)', 'from sklearn.preprocessing import StandardScaler', 'sc=StandardScaler()', \"x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", 'from sklearn.svm import SVC', 'svc=SVC()', 'svc.fit(x_train,y_train)', 'y_pred=svc.predict(x_test)', 'from sklearn.metrics import confusion_matrix,classification_report', 'confusion_matrix(y_test,y_pred)', 'print(classification_report(y_test,y_pred))', 'from sklearn.model_selection import GridSearchCV', \"param_grid={'C':[0.1,1,10,],\\n                'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid.fit(x_train,y_train)', 'print(grid.best_estimator_)', 'grid_predictions=grid.predict(x_test)', 'confusion_matrix(y_test,grid_predictions)', 'print(classification_report(y_test,grid_predictions))', 'svc_rus=SVC()', 'svc_rus.fit(x_train_rus,y_train_rus)', 'y_pred_rus=svc_rus.predict(x_test_rus)', 'confusion_matrix(y_test_rus,y_pred_rus)', 'print(classification_report(y_test_rus,y_pred_rus))', \"param_grid={'C':[0.1,1,10],\\n            'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'from sklearn.model_selection import GridSearchCV', 'from sklearn.svm import SVC', 'print (locals())'], 'Out': {6:    CustomerId   Surname  CreditScore Geography  Gender  Age  Tenure  \\\n","0    15634602  Hargrave          619    France  Female   42       2   \n","1    15647311      Hill          608     Spain  Female   41       1   \n","2    15619304      Onio          502    France  Female   42       8   \n","3    15701354      Boni          699    France  Female   39       1   \n","4    15737888  Mitchell          850     Spain  Female   43       2   \n","\n","     Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0       0.00                1                1                 1   \n","1   83807.86                1                0                 1   \n","2  159660.80                3                1                 0   \n","3       0.00                2                0                 0   \n","4  125510.82                1                1                 1   \n","\n","   Estimated Salary  Churn  \n","0         101348.88      1  \n","1         112542.58      0  \n","2         113931.57      1  \n","3          93826.63      0  \n","4          79084.10      0  , 8: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn'],\n","      dtype='object'), 9: 0, 11: France     5014\n","Germany    2509\n","Spain      2477\n","Name: Geography, dtype: int64, 13: <bound method IndexOpsMixin.value_counts of 0       Female\n","1       Female\n","2       Female\n","3       Female\n","4       Female\n","         ...  \n","9995      Male\n","9996      Male\n","9997    Female\n","9998      Male\n","9999    Female\n","Name: Gender, Length: 10000, dtype: object>, 15: 1    5084\n","2    4590\n","3     266\n","4      60\n","Name: Num Of Products, dtype: int64, 17: 1    7055\n","0    2945\n","Name: Has Credit Card, dtype: int64, 18: 1    5151\n","0    4849\n","Name: Is Active Member, dtype: int64, 19: 0    3117\n","1     500\n","Name: Churn, dtype: int64, 21: <Axes: >, 22:                  CustomerId  Surname  CreditScore  Gender   Age  Tenure  \\\n","Churn Geography                                                           \n","0     0                2064     2064         2064    2064  2064    2064   \n","      1                1695     1695         1695    1695  1695    1695   \n","      2                4204     4204         4204    4204  4204    4204   \n","1     0                 413      413          413     413   413     413   \n","      1                 814      814          814     814   814     814   \n","      2                 810      810          810     810   810     810   \n","\n","                 Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","Churn Geography                                                                \n","0     0             2064             2064             2064              2064   \n","      1             1695             1695             1695              1695   \n","      2             4204             4204             4204              4204   \n","1     0              413              413              413               413   \n","      1              814              814              814               814   \n","      2              810              810              810               810   \n","\n","                 Estimated Salary  Zero Balance  \n","Churn Geography                                  \n","0     0                      2064          2064  \n","      1                      1695          1695  \n","      2                      4204          4204  \n","1     0                       413           413  \n","      1                       814           814  \n","      2                       810           810  , 23: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn', 'Zero Balance'],\n","      dtype='object'), 26: ((10000, 12), (10000,)), 27: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 29: ((10000, 12), (10000,)), 34: ((4074, 12), (4074,), (10000, 12), (10000,)), 35: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 36: 0    2037\n","1    2037\n","Name: Churn, dtype: int64, 37: <Axes: ylabel='Frequency'>, 42: ((15926, 12), (15926,), (10000, 12), (10000,)), 43: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 44: 1    7963\n","0    7963\n","Name: Churn, dtype: int64, 45: <Axes: ylabel='Frequency'>, 60: SVC(), 63: array([[2419,    0],\n","       [ 581,    0]]), 67: GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), 70: array([[2419,    0],\n","       [ 581,    0]]), 73: SVC(), 75: array([[603,   0],\n","       [620,   0]])}, 'get_ipython': <bound method InteractiveShell.get_ipython of <google.colab._shell.Shell object at 0x7a537a1dbaf0>>, 'exit': <IPython.core.autocall.ZMQExitAutocall object at 0x7a537a2200d0>, 'quit': <IPython.core.autocall.ZMQExitAutocall object at 0x7a537a2200d0>, '_': array([[603,   0],\n","       [620,   0]]), '__': SVC(), '___': array([[2419,    0],\n","       [ 581,    0]]), '_i': 'from sklearn.svm import SVC', '_ii': 'from sklearn.model_selection import GridSearchCV', '_iii': \"param_grid={'C':[0.1,1,10],\\n            'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", '_i1': 'import pandas as pd', 'pd': <module 'pandas' from '/usr/local/lib/python3.10/dist-packages/pandas/__init__.py'>, '_i2': 'import numpy as np', 'np': <module 'numpy' from '/usr/local/lib/python3.10/dist-packages/numpy/__init__.py'>, '_i3': 'import matplotlib.pyplot as plt', 'plt': <module 'matplotlib.pyplot' from '/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py'>, '_i4': 'import seaborn as sns', 'sns': <module 'seaborn' from '/usr/local/lib/python3.10/dist-packages/seaborn/__init__.py'>, '_i5': \"df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')\", 'df':       CustomerId    Surname  CreditScore  Geography  Gender  Age  Tenure  \\\n","0       15634602   Hargrave          619          2       1   42       2   \n","1       15647311       Hill          608          0       1   41       1   \n","2       15619304       Onio          502          2       1   42       8   \n","3       15701354       Boni          699          2       1   39       1   \n","4       15737888   Mitchell          850          0       1   43       2   \n","...          ...        ...          ...        ...     ...  ...     ...   \n","9995    15606229   Obijiaku          771          2       0   39       5   \n","9996    15569892  Johnstone          516          2       0   35      10   \n","9997    15584532        Liu          709          2       1   36       7   \n","9998    15682355  Sabbatini          772          1       0   42       3   \n","9999    15628319     Walker          792          2       1   28       4   \n","\n","        Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0          0.00                0                1                 1   \n","1      83807.86                0                0                 1   \n","2     159660.80                1                1                 0   \n","3          0.00                1                0                 0   \n","4     125510.82                0                1                 1   \n","...         ...              ...              ...               ...   \n","9995       0.00                1                1                 0   \n","9996   57369.61                0                1                 1   \n","9997       0.00                0                0                 1   \n","9998   75075.31                1                1                 0   \n","9999  130142.79                0                1                 0   \n","\n","      Estimated Salary  Churn  Zero Balance  \n","0            101348.88      1             0  \n","1            112542.58      0             1  \n","2            113931.57      1             1  \n","3             93826.63      0             0  \n","4             79084.10      0             1  \n","...                ...    ...           ...  \n","9995          96270.64      0             0  \n","9996         101699.77      0             1  \n","9997          42085.58      1             0  \n","9998          92888.52      1             1  \n","9999          38190.78      0             1  \n","\n","[10000 rows x 14 columns], '_i6': 'df.head()', '_6':    CustomerId   Surname  CreditScore Geography  Gender  Age  Tenure  \\\n","0    15634602  Hargrave          619    France  Female   42       2   \n","1    15647311      Hill          608     Spain  Female   41       1   \n","2    15619304      Onio          502    France  Female   42       8   \n","3    15701354      Boni          699    France  Female   39       1   \n","4    15737888  Mitchell          850     Spain  Female   43       2   \n","\n","     Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0       0.00                1                1                 1   \n","1   83807.86                1                0                 1   \n","2  159660.80                3                1                 0   \n","3       0.00                2                0                 0   \n","4  125510.82                1                1                 1   \n","\n","   Estimated Salary  Churn  \n","0         101348.88      1  \n","1         112542.58      0  \n","2         113931.57      1  \n","3          93826.63      0  \n","4          79084.10      0  , '_i7': 'df.info()', '_i8': 'df.columns', '_8': Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn'],\n","      dtype='object'), '_i9': \"df.duplicated('CustomerId').sum()\", '_9': 0, '_i10': 'df.info()', '_i11': \"df['Geography'].value_counts()\", '_11': France     5014\n","Germany    2509\n","Spain      2477\n","Name: Geography, dtype: int64, '_i12': \"df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)\", '_i13': \"df['Gender'].value_counts\", '_13': <bound method IndexOpsMixin.value_counts of 0       Female\n","1       Female\n","2       Female\n","3       Female\n","4       Female\n","         ...  \n","9995      Male\n","9996      Male\n","9997    Female\n","9998      Male\n","9999    Female\n","Name: Gender, Length: 10000, dtype: object>, '_i14': \"df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)\", '_i15': \"df['Num Of Products'].value_counts()\", '_15': 1    5084\n","2    4590\n","3     266\n","4      60\n","Name: Num Of Products, dtype: int64, '_i16': \"df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace=True)\", '_i17': \"df['Has Credit Card'].value_counts()\", '_17': 1    7055\n","0    2945\n","Name: Has Credit Card, dtype: int64, '_i18': \"df['Is Active Member'].value_counts()\", '_18': 1    5151\n","0    4849\n","Name: Is Active Member, dtype: int64, '_i19': \"df.loc[(df['Balance']==0),'Churn'].value_counts()\", '_19': 0    3117\n","1     500\n","Name: Churn, dtype: int64, '_i20': \"df['Zero Balance']=np.where(df['Balance']>0,1,0)\", '_i21': \"df['Zero Balance'].hist()\", '_21': <Axes: >, '_i22': \"df.groupby(['Churn','Geography']).count()\", '_22':                  CustomerId  Surname  CreditScore  Gender   Age  Tenure  \\\n","Churn Geography                                                           \n","0     0                2064     2064         2064    2064  2064    2064   \n","      1                1695     1695         1695    1695  1695    1695   \n","      2                4204     4204         4204    4204  4204    4204   \n","1     0                 413      413          413     413   413     413   \n","      1                 814      814          814     814   814     814   \n","      2                 810      810          810     810   810     810   \n","\n","                 Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","Churn Geography                                                                \n","0     0             2064             2064             2064              2064   \n","      1             1695             1695             1695              1695   \n","      2             4204             4204             4204              4204   \n","1     0              413              413              413               413   \n","      1              814              814              814               814   \n","      2              810              810              810               810   \n","\n","                 Estimated Salary  Zero Balance  \n","Churn Geography                                  \n","0     0                      2064          2064  \n","      1                      1695          1695  \n","      2                      4204          4204  \n","1     0                       413           413  \n","      1                       814           814  \n","      2                       810           810  , '_i23': 'df.columns', '_23': Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn', 'Zero Balance'],\n","      dtype='object'), '_i24': \"x=df.drop(['Surname','Churn'],axis=1)\", 'x':       CustomerId  CreditScore  Geography  Gender  Age  Tenure    Balance  \\\n","0       15634602          619          2       1   42       2       0.00   \n","1       15647311          608          0       1   41       1   83807.86   \n","2       15619304          502          2       1   42       8  159660.80   \n","3       15701354          699          2       1   39       1       0.00   \n","4       15737888          850          0       1   43       2  125510.82   \n","...          ...          ...        ...     ...  ...     ...        ...   \n","9995    15606229          771          2       0   39       5       0.00   \n","9996    15569892          516          2       0   35      10   57369.61   \n","9997    15584532          709          2       1   36       7       0.00   \n","9998    15682355          772          1       0   42       3   75075.31   \n","9999    15628319          792          2       1   28       4  130142.79   \n","\n","      Num Of Products  Has Credit Card  Is Active Member  Estimated Salary  \\\n","0                   0                1                 1         101348.88   \n","1                   0                0                 1         112542.58   \n","2                   1                1                 0         113931.57   \n","3                   1                0                 0          93826.63   \n","4                   0                1                 1          79084.10   \n","...               ...              ...               ...               ...   \n","9995                1                1                 0          96270.64   \n","9996                0                1                 1         101699.77   \n","9997                0                0                 1          42085.58   \n","9998                1                1                 0          92888.52   \n","9999                0                1                 0          38190.78   \n","\n","      Zero Balance  \n","0                0  \n","1                1  \n","2                1  \n","3                0  \n","4                1  \n","...            ...  \n","9995             0  \n","9996             1  \n","9997             0  \n","9998             1  \n","9999             1  \n","\n","[10000 rows x 12 columns], '_i25': \"y=df['Churn']\", 'y': 0       1\n","1       0\n","2       1\n","3       0\n","4       0\n","       ..\n","9995    0\n","9996    0\n","9997    1\n","9998    1\n","9999    0\n","Name: Churn, Length: 10000, dtype: int64, '_i26': 'x.shape,y.shape', '_26': ((10000, 12), (10000,)), '_i27': \"df['Churn'].value_counts()\", '_27': 0    7963\n","1    2037\n","Name: Churn, dtype: int64, '_i28': \"sns.countplot(x='Churn',data=df);\", '_i29': 'x.shape,y.shape', '_29': ((10000, 12), (10000,)), '_i30': '!pip install imblearn', '_exit_code': 0, '_i31': 'from imblearn.under_sampling import RandomUnderSampler', 'RandomUnderSampler': <class 'imblearn.under_sampling._prototype_selection._random_under_sampler.RandomUnderSampler'>, '_i32': 'rus=RandomUnderSampler(random_state=2529)', 'rus': RandomUnderSampler(random_state=2529), '_i33': 'x_rus,y_rus=rus.fit_resample(x,y)', 'x_rus':       CustomerId  CreditScore  Geography  Gender  Age  Tenure    Balance  \\\n","0       15696361          648          1       0   31       7  125681.51   \n","1       15793196          759          2       0   41       9       0.00   \n","2       15703778          728          2       0   33       8  129907.63   \n","3       15724838          599          2       1   43       4       0.00   \n","4       15624528          664          1       0   26       7  116244.14   \n","...          ...          ...        ...     ...  ...     ...        ...   \n","4069    15672754          498          1       0   42       3  152039.70   \n","4070    15768163          655          1       1   46       7  137145.12   \n","4071    15769959          597          2       1   53       4   88381.21   \n","4072    15584532          709          2       1   36       7       0.00   \n","4073    15682355          772          1       0   42       3   75075.31   \n","\n","      Num Of Products  Has Credit Card  Is Active Member  Estimated Salary  \\\n","0                   0                0                 1         129980.93   \n","1                   1                0                 1         190294.12   \n","2                   0                0                 1          36083.96   \n","3                   0                1                 0         170347.10   \n","4                   1                1                 1          95145.14   \n","...               ...              ...               ...               ...   \n","4069                0                1                 1          53445.17   \n","4070                0                1                 0         115146.40   \n","4071                0                1                 0          69384.71   \n","4072                0                0                 1          42085.58   \n","4073                1                1                 0          92888.52   \n","\n","      Zero Balance  \n","0                1  \n","1                0  \n","2                1  \n","3                0  \n","4                1  \n","...            ...  \n","4069             1  \n","4070             1  \n","4071             1  \n","4072             0  \n","4073             1  \n","\n","[4074 rows x 12 columns], 'y_rus': 0       0\n","1       0\n","2       0\n","3       0\n","4       0\n","       ..\n","4069    1\n","4070    1\n","4071    1\n","4072    1\n","4073    1\n","Name: Churn, Length: 4074, dtype: int64, '_i34': 'x_rus.shape,y_rus.shape,x.shape,y.shape', '_34': ((4074, 12), (4074,), (10000, 12), (10000,)), '_i35': 'y.value_counts()', '_35': 0    7963\n","1    2037\n","Name: Churn, dtype: int64, '_i36': 'y_rus.value_counts()', '_36': 0    2037\n","1    2037\n","Name: Churn, dtype: int64, '_i37': \"y_rus.plot(kind='hist')\", '_37': <Axes: ylabel='Frequency'>, '_i38': '!pip show imblearn', '_i39': 'from imblearn.over_sampling import RandomOverSampler', 'RandomOverSampler': <class 'imblearn.over_sampling._random_over_sampler.RandomOverSampler'>, '_i40': 'ros=RandomOverSampler(random_state=2529)', 'ros': RandomOverSampler(random_state=2529), '_i41': 'x_ros,y_ros=ros.fit_resample(x,y)', 'x_ros':        CustomerId  CreditScore  Geography  Gender  Age  Tenure    Balance  \\\n","0        15634602          619          2       1   42       2       0.00   \n","1        15647311          608          0       1   41       1   83807.86   \n","2        15619304          502          2       1   42       8  159660.80   \n","3        15701354          699          2       1   39       1       0.00   \n","4        15737888          850          0       1   43       2  125510.82   \n","...           ...          ...        ...     ...  ...     ...        ...   \n","15921    15611331          511          2       1   46       1       0.00   \n","15922    15766288          586          1       1   36       5  103700.69   \n","15923    15717770          850          0       1   55       7       0.00   \n","15924    15608528          645          2       1   68       9       0.00   \n","15925    15612207          840          1       1   51       1   87779.83   \n","\n","       Num Of Products  Has Credit Card  Is Active Member  Estimated Salary  \\\n","0                    0                1                 1         101348.88   \n","1                    0                0                 1         112542.58   \n","2                    1                1                 0         113931.57   \n","3                    1                0                 0          93826.63   \n","4                    0                1                 1          79084.10   \n","...                ...              ...               ...               ...   \n","15921                0                1                 1         115779.48   \n","15922                0                1                 0         194072.56   \n","15923                0                0                 0         171762.87   \n","15924                1                1                 1         176353.87   \n","15925                0                0                 1          36687.11   \n","\n","       Zero Balance  \n","0                 0  \n","1                 1  \n","2                 1  \n","3                 0  \n","4                 1  \n","...             ...  \n","15921             0  \n","15922             1  \n","15923             0  \n","15924             0  \n","15925             1  \n","\n","[15926 rows x 12 columns], 'y_ros': 0        1\n","1        0\n","2        1\n","3        0\n","4        0\n","        ..\n","15921    1\n","15922    1\n","15923    1\n","15924    1\n","15925    1\n","Name: Churn, Length: 15926, dtype: int64, '_i42': 'x_ros.shape,y_ros.shape,x.shape,y.shape', '_42': ((15926, 12), (15926,), (10000, 12), (10000,)), '_i43': 'y.value_counts()', '_43': 0    7963\n","1    2037\n","Name: Churn, dtype: int64, '_i44': 'y_ros.value_counts()', '_44': 1    7963\n","0    7963\n","Name: Churn, dtype: int64, '_i45': \"y_ros.plot(kind='hist')\", '_45': <Axes: ylabel='Frequency'>, '_i46': 'from sklearn.model_selection import train_test_split', 'train_test_split': <function train_test_split at 0x7a53305ef520>, '_i47': 'x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=25)', 'x_train':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","6625    15610912     0.072515          0       1  0.192079  0.341635   \n","2489    15776824     0.663750          2       0 -1.043723  0.341635   \n","9919    15798084     0.394064          2       0 -1.233846 -1.734575   \n","6964    15569249    -0.767663          2       1  1.522942  0.341635   \n","3467    15771509    -1.161820          1       1  0.287141 -1.388540   \n","...          ...          ...        ...     ...       ...       ...   \n","1175    15721292     0.715613          0       0  0.001956 -0.004400   \n","8447    15792627     1.192751          0       1 -0.568415 -0.004400   \n","2934    15690188    -0.197172          2       0 -0.568415  0.687671   \n","6618    15756301    -0.145309          1       1 -0.948661 -0.696470   \n","8510    15769353    -1.037349          2       1  0.097017  1.033706   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","6625  0.570059                0                1                 0   \n","2489  0.740093                0                1                 1   \n","9919 -1.227615                1                1                 0   \n","6964 -0.512806                1                0                 1   \n","3467  0.352470                1                0                 1   \n","...        ...              ...              ...               ...   \n","1175 -1.227615                1                1                 0   \n","8447  0.128147                0                1                 1   \n","2934 -1.227615                0                1                 1   \n","6618  0.332853                0                0                 1   \n","8510  1.185280                0                0                 0   \n","\n","      Estimated Salary  Zero Balance  \n","6625         -1.455204             1  \n","2489         -0.587612             1  \n","9919          0.090890             0  \n","6964         -0.579157             1  \n","3467         -0.114743             1  \n","...                ...           ...  \n","1175          0.791244             0  \n","8447         -0.552885             1  \n","2934         -0.745541             0  \n","6618          0.548851             1  \n","8510          1.154054             1  \n","\n","[7000 rows x 12 columns], 'x_test':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","3555    15629094    -1.273117          2       1 -0.267742 -1.385208   \n","4078    15690440     0.043812          0       0  0.788882 -1.385208   \n","8445    15678333     0.321602          2       1 -1.228310  0.685873   \n","5939    15709861     1.175547          1       0 -0.844083 -0.349667   \n","5583    15620579     0.445064          0       1 -0.748026  1.031053   \n","...          ...          ...        ...     ...       ...       ...   \n","3341    15640866     0.681699          2       1 -0.940139 -0.694848   \n","4876    15585133     0.054100          0       1 -1.132253  1.031053   \n","8343    15591698     2.029493          1       1  0.980996  1.376233   \n","7913    15649450     1.576799          1       0 -1.420423  0.340693   \n","2190    15609998     0.496506          1       1  1.941563 -0.004487   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","3555  1.291352                0                1                 1   \n","4078 -1.221738                1                1                 1   \n","8445 -1.221738                1                1                 0   \n","5939  0.824402                1                1                 1   \n","5583 -1.221738                1                0                 1   \n","...        ...              ...              ...               ...   \n","3341 -1.221738                0                0                 1   \n","4876 -1.221738                1                0                 0   \n","8343  0.906843                0                1                 0   \n","7913  1.071552                1                1                 0   \n","2190  0.982316                0                1                 0   \n","\n","      Estimated Salary  Zero Balance  \n","3555          0.872162             1  \n","4078          1.693796             0  \n","8445         -0.210120             0  \n","5939         -1.197464             1  \n","5583          0.559787             0  \n","...                ...           ...  \n","3341          0.607972             0  \n","4876         -1.580687             0  \n","8343          1.233724             1  \n","7913          1.489862             1  \n","2190          0.753572             1  \n","\n","[3000 rows x 12 columns], 'y_train': 6625    0\n","2489    0\n","9919    0\n","6964    1\n","3467    0\n","       ..\n","1175    0\n","8447    0\n","2934    1\n","6618    0\n","8510    1\n","Name: Churn, Length: 7000, dtype: int64, 'y_test': 3555    1\n","4078    0\n","8445    0\n","5939    0\n","5583    0\n","       ..\n","3341    0\n","4876    0\n","8343    1\n","7913    0\n","2190    1\n","Name: Churn, Length: 3000, dtype: int64, '_i48': 'x_train_rus,x_test_rus,y_train_rus,y_test_rus=train_test_split(x_rus,y_rus,test_size=0.3,random_state=25)', 'x_train_rus':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","2151    15775318    -0.592469          0       1  0.919891 -0.677165   \n","3960    15814405    -2.345769          2       1  0.451752  1.379214   \n","2417    15758813    -3.038933          1       0 -0.203643 -1.705354   \n","1310    15715643     0.141470          2       0  0.264496  1.036484   \n","1741    15655794    -0.286661          2       0 -0.484526  1.036484   \n","...          ...          ...        ...     ...       ...       ...   \n","3389    15795275    -1.295828          0       1  0.732635 -0.334435   \n","2191    15637876     0.151663          1       1 -0.484526  0.351025   \n","2522    15724223    -1.051181          2       1  1.294402  0.008295   \n","318     15659002     1.201604          2       1  0.358124  0.351025   \n","1156    15716328    -1.499700          2       1 -0.110015 -1.019895   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","2151  1.193595                1                0                 1   \n","3960 -1.328223                0                1                 1   \n","2417  0.457539                1                0                 0   \n","1310 -1.328223                1                1                 1   \n","1741 -1.328223                1                1                 1   \n","...        ...              ...              ...               ...   \n","3389  0.021520                1                0                 0   \n","2191 -0.071025                0                0                 0   \n","2522 -1.328223                0                0                 0   \n","318  -1.328223                1                0                 0   \n","1156 -1.328223                1                0                 0   \n","\n","      Estimated Salary  Zero Balance  \n","2151          1.591539             1  \n","3960         -0.335104             0  \n","2417          0.404643             1  \n","1310          1.302894             0  \n","1741          0.792618             0  \n","...                ...           ...  \n","3389         -0.658212             1  \n","2191         -1.120169             1  \n","2522         -1.568023             0  \n","318           0.814274             0  \n","1156          0.723293             0  \n","\n","[2851 rows x 12 columns], 'x_test_rus':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","1577    15685920    -0.516195          0       0 -0.704269 -1.024456   \n","3407    15739578     2.046770          2       0  0.731425  0.355021   \n","122     15597951    -1.823205          2       1  1.592842 -0.334718   \n","3081    15585580     1.495375          1       1  1.018564  1.389629   \n","2776    15594878     0.116888          0       1 -0.034278  0.010152   \n","...          ...          ...        ...     ...       ...       ...   \n","3786    15717191    -1.445397          2       0  0.731425 -1.369326   \n","808     15795933     0.280264          2       1  0.731425 -0.679587   \n","2704    15680752     0.259842          2       1  0.731425 -1.714195   \n","3107    15718465     0.218998          1       0  0.922851 -0.679587   \n","3798    15585985     0.984825          2       0  0.635712  0.010152   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","1577  0.324286                0                0                 0   \n","3407  0.761032                0                1                 0   \n","122   0.536681                0                1                 1   \n","3081  1.380683                0                1                 1   \n","2776 -0.856523                0                1                 0   \n","...        ...              ...              ...               ...   \n","3786  0.200626                1                1                 1   \n","808  -1.308156                1                1                 1   \n","2704 -1.308156                0                1                 1   \n","3107  0.250064                0                1                 0   \n","3798  1.349935                0                1                 0   \n","\n","      Estimated Salary  Zero Balance  \n","1577          1.737628             1  \n","3407         -0.608436             1  \n","122          -1.130901             1  \n","3081         -0.660948             1  \n","2776         -0.540731             1  \n","...                ...           ...  \n","3786          0.574688             1  \n","808           1.556370             0  \n","2704         -0.347200             0  \n","3107          1.354006             1  \n","3798          0.952825             1  \n","\n","[1223 rows x 12 columns], 'y_train_rus': 2151    1\n","3960    1\n","2417    1\n","1310    0\n","1741    0\n","       ..\n","3389    1\n","2191    1\n","2522    1\n","318     0\n","1156    0\n","Name: Churn, Length: 2851, dtype: int64, 'y_test_rus': 1577    0\n","3407    1\n","122     0\n","3081    1\n","2776    1\n","       ..\n","3786    1\n","808     0\n","2704    1\n","3107    1\n","3798    1\n","Name: Churn, Length: 1223, dtype: int64, '_i49': 'x_train_ros,x_test_ros,y_train_ros,y_test_ros=train_test_split(x_ros,y_ros,test_size=0.3,random_state=25)', 'x_train_ros':        CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","11986    15669301     1.326396          1       1 -1.137457  0.358716   \n","13023    15769246     1.686690          1       0  1.683454 -1.014320   \n","6914     15808849     0.544044          2       0 -0.103123  0.701976   \n","11542    15645323    -0.197132          2       0  1.307333 -1.014320   \n","69       15755648     0.266103          2       1 -1.889700  1.045235   \n","...           ...          ...        ...     ...       ...       ...   \n","15677    15687001    -0.547132          1       0  1.213302 -1.357580   \n","10383    15699415    -0.320661          2       1  0.461059  0.358716   \n","6618     15756301    -0.135367          1       1 -1.137457 -0.671061   \n","8510     15769353    -1.020661          2       1 -0.103123  1.045235   \n","13444    15737104     0.029338          1       1  0.555090 -1.700839   \n","\n","        Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","11986  1.118089                0                1                 0   \n","13023  0.869403                0                1                 0   \n","6914   1.039611                0                0                 1   \n","11542 -1.328953                0                1                 1   \n","69     0.272039                0                1                 0   \n","...         ...              ...              ...               ...   \n","15677  0.681684                0                1                 1   \n","10383  1.115725                0                1                 0   \n","6618   0.254981                0                0                 1   \n","8510   1.120227                0                0                 0   \n","13444  0.731385                1                1                 1   \n","\n","       Estimated Salary  Zero Balance  \n","11986         -0.659000             1  \n","13023          1.510168             1  \n","6914           0.603876             1  \n","11542          0.099071             0  \n","69            -1.425786             1  \n","...                 ...           ...  \n","15677          0.343617             1  \n","10383          0.349746             1  \n","6618           0.544790             1  \n","8510           1.143369             1  \n","13444         -1.068900             1  \n","\n","[11148 rows x 12 columns], 'x_test_ros':        CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","13786    15673020     0.325996          2       1  0.722422 -0.690847   \n","7759     15806389    -0.986320          1       1  1.281604 -1.372282   \n","14390    15623499    -0.996493          1       0  0.722422  1.353456   \n","2424     15782941    -0.742168          2       0 -0.955122 -1.031565   \n","10632    15576935     0.987240          0       0  0.163241 -1.031565   \n","...           ...          ...        ...     ...       ...       ...   \n","15186    15580914    -1.708602          0       0  0.629225 -1.712999   \n","12834    15600991     0.488763          1       0 -0.955122  0.331304   \n","7995     15803479     0.631185          2       1  2.399966 -1.372282   \n","5869     15734461    -0.854071          1       0 -0.955122 -1.031565   \n","12317    15761950     0.061498          1       1  0.349635  1.353456   \n","\n","        Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","13786  1.997141                0                0                 1   \n","7759   0.907193                1                0                 1   \n","14390  0.432336                0                0                 0   \n","2424  -1.333864                1                1                 1   \n","10632  1.301597                1                0                 1   \n","...         ...              ...              ...               ...   \n","15186  0.022687                1                0                 1   \n","12834  0.442348                1                1                 1   \n","7995  -1.333864                1                0                 1   \n","5869   0.501889                0                0                 1   \n","12317  0.471257                0                1                 1   \n","\n","       Estimated Salary  Zero Balance  \n","13786         -1.747125             1  \n","7759           0.274859             1  \n","14390          0.457746             1  \n","2424          -0.154484             0  \n","10632         -0.132284             1  \n","...                 ...           ...  \n","15186         -0.989219             1  \n","12834         -1.420454             1  \n","7995          -1.693032             0  \n","5869           1.493930             1  \n","12317          0.917994             1  \n","\n","[4778 rows x 12 columns], 'y_train_ros': 11986    1\n","13023    1\n","6914     0\n","11542    1\n","69       0\n","        ..\n","15677    1\n","10383    1\n","6618     0\n","8510     1\n","13444    1\n","Name: Churn, Length: 11148, dtype: int64, 'y_test_ros': 13786    1\n","7759     1\n","14390    1\n","2424     0\n","10632    1\n","        ..\n","15186    1\n","12834    1\n","7995     0\n","5869     0\n","12317    1\n","Name: Churn, Length: 4778, dtype: int64, '_i50': 'from sklearn.preprocessing import StandardScaler', 'StandardScaler': <class 'sklearn.preprocessing._data.StandardScaler'>, '_i51': 'sc=StandardScaler()', 'sc': StandardScaler(), '_i52': \"x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i53': \"x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i54': \"x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i55': \"x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i56': \"x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i57': \"x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i58': 'from sklearn.svm import SVC', 'SVC': <class 'sklearn.svm._classes.SVC'>, '_i59': 'svc=SVC()', 'svc': SVC(), '_i60': 'svc.fit(x_train,y_train)', '_60': SVC(), '_i61': 'y_pred=svc.predict(x_test)', 'y_pred': array([0, 0, 0, ..., 0, 0, 0]), '_i62': 'from sklearn.metrics import confusion_matrix,classification_report', 'confusion_matrix': <function confusion_matrix at 0x7a5330de2710>, 'classification_report': <function classification_report at 0x7a5330de3130>, '_i63': 'confusion_matrix(y_test,y_pred)', '_63': array([[2419,    0],\n","       [ 581,    0]]), '_i64': 'print(classification_report(y_test,y_pred))', '_i65': 'from sklearn.model_selection import GridSearchCV', 'GridSearchCV': <class 'sklearn.model_selection._search.GridSearchCV'>, '_i66': \"param_grid={'C':[0.1,1,10,],\\n                'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'param_grid': {'C': [0.1, 1, 10], 'gamma': [1, 0.1, 0.01], 'kernel': ['rbf'], 'class_weight': ['balanced']}, '_i67': 'grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid.fit(x_train,y_train)', 'grid': GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), '_67': GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), '_i68': 'print(grid.best_estimator_)', '_i69': 'grid_predictions=grid.predict(x_test)', 'grid_predictions': array([0, 0, 0, ..., 0, 0, 0]), '_i70': 'confusion_matrix(y_test,grid_predictions)', '_70': array([[2419,    0],\n","       [ 581,    0]]), '_i71': 'print(classification_report(y_test,grid_predictions))', '_i72': 'svc_rus=SVC()', 'svc_rus': SVC(), '_i73': 'svc_rus.fit(x_train_rus,y_train_rus)', '_73': SVC(), '_i74': 'y_pred_rus=svc_rus.predict(x_test_rus)', 'y_pred_rus': array([0, 0, 0, ..., 0, 0, 0]), '_i75': 'confusion_matrix(y_test_rus,y_pred_rus)', '_75': array([[603,   0],\n","       [620,   0]]), '_i76': 'print(classification_report(y_test_rus,y_pred_rus))', '_i77': \"param_grid={'C':[0.1,1,10],\\n            'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", '_i78': 'from sklearn.model_selection import GridSearchCV', '_i79': 'from sklearn.svm import SVC', '_i80': 'print (locals())'}\n"]}],"source":["print (locals())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"elapsed":6774,"status":"ok","timestamp":1707483984698,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"eVV_8lmveYId","outputId":"843a6d98-df20-4427-9f42-bb932464b0ca"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 9 candidates, totalling 18 fits\n","[CV] END ..C=0.1, class_weight=balanced, gamma=1, kernel=rbf; total time=   0.3s\n","[CV] END ..C=0.1, class_weight=balanced, gamma=1, kernel=rbf; total time=   0.3s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   0.3s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   0.3s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   0.3s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   0.3s\n","[CV] END ....C=1, class_weight=balanced, gamma=1, kernel=rbf; total time=   0.3s\n","[CV] END ....C=1, class_weight=balanced, gamma=1, kernel=rbf; total time=   0.3s\n","[CV] END ..C=1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   0.3s\n","[CV] END ..C=1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   0.3s\n","[CV] END .C=1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   0.3s\n","[CV] END .C=1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   0.5s\n","[CV] END ...C=10, class_weight=balanced, gamma=1, kernel=rbf; total time=   0.5s\n","[CV] END ...C=10, class_weight=balanced, gamma=1, kernel=rbf; total time=   0.5s\n","[CV] END .C=10, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   0.5s\n","[CV] END .C=10, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   0.5s\n","[CV] END C=10, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   0.3s\n","[CV] END C=10, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   0.3s\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2)"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [0.1, 1, 10], &#x27;class_weight&#x27;: [&#x27;balanced&#x27;],\n","                         &#x27;gamma&#x27;: [1, 0.1, 0.01], &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n","             verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [0.1, 1, 10], &#x27;class_weight&#x27;: [&#x27;balanced&#x27;],\n","                         &#x27;gamma&#x27;: [1, 0.1, 0.01], &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n","             verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":81}],"source":["grid_rus=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\n","grid_rus.fit(x_train_rus,y_train_rus)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":151,"status":"ok","timestamp":1707483984702,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"rHc3tPonGEjP","outputId":"9e0c451d-7077-4b88-c26c-7e1ea188de24"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'__name__': '__main__', '__doc__': 'Automatically created module for IPython interactive environment', '__package__': None, '__loader__': None, '__spec__': None, '__builtin__': <module 'builtins' (built-in)>, '__builtins__': <module 'builtins' (built-in)>, '_ih': ['', 'import pandas as pd', 'import numpy as np', 'import matplotlib.pyplot as plt', 'import seaborn as sns', \"df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')\", 'df.head()', 'df.info()', 'df.columns', \"df.duplicated('CustomerId').sum()\", 'df.info()', \"df['Geography'].value_counts()\", \"df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)\", \"df['Gender'].value_counts\", \"df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)\", \"df['Num Of Products'].value_counts()\", \"df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace=True)\", \"df['Has Credit Card'].value_counts()\", \"df['Is Active Member'].value_counts()\", \"df.loc[(df['Balance']==0),'Churn'].value_counts()\", \"df['Zero Balance']=np.where(df['Balance']>0,1,0)\", \"df['Zero Balance'].hist()\", \"df.groupby(['Churn','Geography']).count()\", 'df.columns', \"x=df.drop(['Surname','Churn'],axis=1)\", \"y=df['Churn']\", 'x.shape,y.shape', \"df['Churn'].value_counts()\", \"sns.countplot(x='Churn',data=df);\", 'x.shape,y.shape', \"get_ipython().system('pip install imblearn')\", 'from imblearn.under_sampling import RandomUnderSampler', 'rus=RandomUnderSampler(random_state=2529)', 'x_rus,y_rus=rus.fit_resample(x,y)', 'x_rus.shape,y_rus.shape,x.shape,y.shape', 'y.value_counts()', 'y_rus.value_counts()', \"y_rus.plot(kind='hist')\", \"get_ipython().system('pip show imblearn')\", 'from imblearn.over_sampling import RandomOverSampler', 'ros=RandomOverSampler(random_state=2529)', 'x_ros,y_ros=ros.fit_resample(x,y)', 'x_ros.shape,y_ros.shape,x.shape,y.shape', 'y.value_counts()', 'y_ros.value_counts()', \"y_ros.plot(kind='hist')\", 'from sklearn.model_selection import train_test_split', 'x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=25)', 'x_train_rus,x_test_rus,y_train_rus,y_test_rus=train_test_split(x_rus,y_rus,test_size=0.3,random_state=25)', 'x_train_ros,x_test_ros,y_train_ros,y_test_ros=train_test_split(x_ros,y_ros,test_size=0.3,random_state=25)', 'from sklearn.preprocessing import StandardScaler', 'sc=StandardScaler()', \"x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", 'from sklearn.svm import SVC', 'svc=SVC()', 'svc.fit(x_train,y_train)', 'y_pred=svc.predict(x_test)', 'from sklearn.metrics import confusion_matrix,classification_report', 'confusion_matrix(y_test,y_pred)', 'print(classification_report(y_test,y_pred))', 'from sklearn.model_selection import GridSearchCV', \"param_grid={'C':[0.1,1,10,],\\n                'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid.fit(x_train,y_train)', 'print(grid.best_estimator_)', 'grid_predictions=grid.predict(x_test)', 'confusion_matrix(y_test,grid_predictions)', 'print(classification_report(y_test,grid_predictions))', 'svc_rus=SVC()', 'svc_rus.fit(x_train_rus,y_train_rus)', 'y_pred_rus=svc_rus.predict(x_test_rus)', 'confusion_matrix(y_test_rus,y_pred_rus)', 'print(classification_report(y_test_rus,y_pred_rus))', \"param_grid={'C':[0.1,1,10],\\n            'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'from sklearn.model_selection import GridSearchCV', 'from sklearn.svm import SVC', 'print (locals())', 'grid_rus=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid_rus.fit(x_train_rus,y_train_rus)', 'print(globals())'], '_oh': {6:    CustomerId   Surname  CreditScore Geography  Gender  Age  Tenure  \\\n","0    15634602  Hargrave          619    France  Female   42       2   \n","1    15647311      Hill          608     Spain  Female   41       1   \n","2    15619304      Onio          502    France  Female   42       8   \n","3    15701354      Boni          699    France  Female   39       1   \n","4    15737888  Mitchell          850     Spain  Female   43       2   \n","\n","     Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0       0.00                1                1                 1   \n","1   83807.86                1                0                 1   \n","2  159660.80                3                1                 0   \n","3       0.00                2                0                 0   \n","4  125510.82                1                1                 1   \n","\n","   Estimated Salary  Churn  \n","0         101348.88      1  \n","1         112542.58      0  \n","2         113931.57      1  \n","3          93826.63      0  \n","4          79084.10      0  , 8: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn'],\n","      dtype='object'), 9: 0, 11: France     5014\n","Germany    2509\n","Spain      2477\n","Name: Geography, dtype: int64, 13: <bound method IndexOpsMixin.value_counts of 0       Female\n","1       Female\n","2       Female\n","3       Female\n","4       Female\n","         ...  \n","9995      Male\n","9996      Male\n","9997    Female\n","9998      Male\n","9999    Female\n","Name: Gender, Length: 10000, dtype: object>, 15: 1    5084\n","2    4590\n","3     266\n","4      60\n","Name: Num Of Products, dtype: int64, 17: 1    7055\n","0    2945\n","Name: Has Credit Card, dtype: int64, 18: 1    5151\n","0    4849\n","Name: Is Active Member, dtype: int64, 19: 0    3117\n","1     500\n","Name: Churn, dtype: int64, 21: <Axes: >, 22:                  CustomerId  Surname  CreditScore  Gender   Age  Tenure  \\\n","Churn Geography                                                           \n","0     0                2064     2064         2064    2064  2064    2064   \n","      1                1695     1695         1695    1695  1695    1695   \n","      2                4204     4204         4204    4204  4204    4204   \n","1     0                 413      413          413     413   413     413   \n","      1                 814      814          814     814   814     814   \n","      2                 810      810          810     810   810     810   \n","\n","                 Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","Churn Geography                                                                \n","0     0             2064             2064             2064              2064   \n","      1             1695             1695             1695              1695   \n","      2             4204             4204             4204              4204   \n","1     0              413              413              413               413   \n","      1              814              814              814               814   \n","      2              810              810              810               810   \n","\n","                 Estimated Salary  Zero Balance  \n","Churn Geography                                  \n","0     0                      2064          2064  \n","      1                      1695          1695  \n","      2                      4204          4204  \n","1     0                       413           413  \n","      1                       814           814  \n","      2                       810           810  , 23: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn', 'Zero Balance'],\n","      dtype='object'), 26: ((10000, 12), (10000,)), 27: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 29: ((10000, 12), (10000,)), 34: ((4074, 12), (4074,), (10000, 12), (10000,)), 35: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 36: 0    2037\n","1    2037\n","Name: Churn, dtype: int64, 37: <Axes: ylabel='Frequency'>, 42: ((15926, 12), (15926,), (10000, 12), (10000,)), 43: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 44: 1    7963\n","0    7963\n","Name: Churn, dtype: int64, 45: <Axes: ylabel='Frequency'>, 60: SVC(), 63: array([[2419,    0],\n","       [ 581,    0]]), 67: GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), 70: array([[2419,    0],\n","       [ 581,    0]]), 73: SVC(), 75: array([[603,   0],\n","       [620,   0]]), 81: GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2)}, '_dh': ['/content'], 'In': ['', 'import pandas as pd', 'import numpy as np', 'import matplotlib.pyplot as plt', 'import seaborn as sns', \"df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')\", 'df.head()', 'df.info()', 'df.columns', \"df.duplicated('CustomerId').sum()\", 'df.info()', \"df['Geography'].value_counts()\", \"df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)\", \"df['Gender'].value_counts\", \"df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)\", \"df['Num Of Products'].value_counts()\", \"df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace=True)\", \"df['Has Credit Card'].value_counts()\", \"df['Is Active Member'].value_counts()\", \"df.loc[(df['Balance']==0),'Churn'].value_counts()\", \"df['Zero Balance']=np.where(df['Balance']>0,1,0)\", \"df['Zero Balance'].hist()\", \"df.groupby(['Churn','Geography']).count()\", 'df.columns', \"x=df.drop(['Surname','Churn'],axis=1)\", \"y=df['Churn']\", 'x.shape,y.shape', \"df['Churn'].value_counts()\", \"sns.countplot(x='Churn',data=df);\", 'x.shape,y.shape', \"get_ipython().system('pip install imblearn')\", 'from imblearn.under_sampling import RandomUnderSampler', 'rus=RandomUnderSampler(random_state=2529)', 'x_rus,y_rus=rus.fit_resample(x,y)', 'x_rus.shape,y_rus.shape,x.shape,y.shape', 'y.value_counts()', 'y_rus.value_counts()', \"y_rus.plot(kind='hist')\", \"get_ipython().system('pip show imblearn')\", 'from imblearn.over_sampling import RandomOverSampler', 'ros=RandomOverSampler(random_state=2529)', 'x_ros,y_ros=ros.fit_resample(x,y)', 'x_ros.shape,y_ros.shape,x.shape,y.shape', 'y.value_counts()', 'y_ros.value_counts()', \"y_ros.plot(kind='hist')\", 'from sklearn.model_selection import train_test_split', 'x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=25)', 'x_train_rus,x_test_rus,y_train_rus,y_test_rus=train_test_split(x_rus,y_rus,test_size=0.3,random_state=25)', 'x_train_ros,x_test_ros,y_train_ros,y_test_ros=train_test_split(x_ros,y_ros,test_size=0.3,random_state=25)', 'from sklearn.preprocessing import StandardScaler', 'sc=StandardScaler()', \"x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", \"x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", 'from sklearn.svm import SVC', 'svc=SVC()', 'svc.fit(x_train,y_train)', 'y_pred=svc.predict(x_test)', 'from sklearn.metrics import confusion_matrix,classification_report', 'confusion_matrix(y_test,y_pred)', 'print(classification_report(y_test,y_pred))', 'from sklearn.model_selection import GridSearchCV', \"param_grid={'C':[0.1,1,10,],\\n                'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid.fit(x_train,y_train)', 'print(grid.best_estimator_)', 'grid_predictions=grid.predict(x_test)', 'confusion_matrix(y_test,grid_predictions)', 'print(classification_report(y_test,grid_predictions))', 'svc_rus=SVC()', 'svc_rus.fit(x_train_rus,y_train_rus)', 'y_pred_rus=svc_rus.predict(x_test_rus)', 'confusion_matrix(y_test_rus,y_pred_rus)', 'print(classification_report(y_test_rus,y_pred_rus))', \"param_grid={'C':[0.1,1,10],\\n            'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'from sklearn.model_selection import GridSearchCV', 'from sklearn.svm import SVC', 'print (locals())', 'grid_rus=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid_rus.fit(x_train_rus,y_train_rus)', 'print(globals())'], 'Out': {6:    CustomerId   Surname  CreditScore Geography  Gender  Age  Tenure  \\\n","0    15634602  Hargrave          619    France  Female   42       2   \n","1    15647311      Hill          608     Spain  Female   41       1   \n","2    15619304      Onio          502    France  Female   42       8   \n","3    15701354      Boni          699    France  Female   39       1   \n","4    15737888  Mitchell          850     Spain  Female   43       2   \n","\n","     Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0       0.00                1                1                 1   \n","1   83807.86                1                0                 1   \n","2  159660.80                3                1                 0   \n","3       0.00                2                0                 0   \n","4  125510.82                1                1                 1   \n","\n","   Estimated Salary  Churn  \n","0         101348.88      1  \n","1         112542.58      0  \n","2         113931.57      1  \n","3          93826.63      0  \n","4          79084.10      0  , 8: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn'],\n","      dtype='object'), 9: 0, 11: France     5014\n","Germany    2509\n","Spain      2477\n","Name: Geography, dtype: int64, 13: <bound method IndexOpsMixin.value_counts of 0       Female\n","1       Female\n","2       Female\n","3       Female\n","4       Female\n","         ...  \n","9995      Male\n","9996      Male\n","9997    Female\n","9998      Male\n","9999    Female\n","Name: Gender, Length: 10000, dtype: object>, 15: 1    5084\n","2    4590\n","3     266\n","4      60\n","Name: Num Of Products, dtype: int64, 17: 1    7055\n","0    2945\n","Name: Has Credit Card, dtype: int64, 18: 1    5151\n","0    4849\n","Name: Is Active Member, dtype: int64, 19: 0    3117\n","1     500\n","Name: Churn, dtype: int64, 21: <Axes: >, 22:                  CustomerId  Surname  CreditScore  Gender   Age  Tenure  \\\n","Churn Geography                                                           \n","0     0                2064     2064         2064    2064  2064    2064   \n","      1                1695     1695         1695    1695  1695    1695   \n","      2                4204     4204         4204    4204  4204    4204   \n","1     0                 413      413          413     413   413     413   \n","      1                 814      814          814     814   814     814   \n","      2                 810      810          810     810   810     810   \n","\n","                 Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","Churn Geography                                                                \n","0     0             2064             2064             2064              2064   \n","      1             1695             1695             1695              1695   \n","      2             4204             4204             4204              4204   \n","1     0              413              413              413               413   \n","      1              814              814              814               814   \n","      2              810              810              810               810   \n","\n","                 Estimated Salary  Zero Balance  \n","Churn Geography                                  \n","0     0                      2064          2064  \n","      1                      1695          1695  \n","      2                      4204          4204  \n","1     0                       413           413  \n","      1                       814           814  \n","      2                       810           810  , 23: Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn', 'Zero Balance'],\n","      dtype='object'), 26: ((10000, 12), (10000,)), 27: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 29: ((10000, 12), (10000,)), 34: ((4074, 12), (4074,), (10000, 12), (10000,)), 35: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 36: 0    2037\n","1    2037\n","Name: Churn, dtype: int64, 37: <Axes: ylabel='Frequency'>, 42: ((15926, 12), (15926,), (10000, 12), (10000,)), 43: 0    7963\n","1    2037\n","Name: Churn, dtype: int64, 44: 1    7963\n","0    7963\n","Name: Churn, dtype: int64, 45: <Axes: ylabel='Frequency'>, 60: SVC(), 63: array([[2419,    0],\n","       [ 581,    0]]), 67: GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), 70: array([[2419,    0],\n","       [ 581,    0]]), 73: SVC(), 75: array([[603,   0],\n","       [620,   0]]), 81: GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2)}, 'get_ipython': <bound method InteractiveShell.get_ipython of <google.colab._shell.Shell object at 0x7a537a1dbaf0>>, 'exit': <IPython.core.autocall.ZMQExitAutocall object at 0x7a537a2200d0>, 'quit': <IPython.core.autocall.ZMQExitAutocall object at 0x7a537a2200d0>, '_': GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), '__': array([[603,   0],\n","       [620,   0]]), '___': SVC(), '_i': 'grid_rus=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid_rus.fit(x_train_rus,y_train_rus)', '_ii': 'print (locals())', '_iii': 'from sklearn.svm import SVC', '_i1': 'import pandas as pd', 'pd': <module 'pandas' from '/usr/local/lib/python3.10/dist-packages/pandas/__init__.py'>, '_i2': 'import numpy as np', 'np': <module 'numpy' from '/usr/local/lib/python3.10/dist-packages/numpy/__init__.py'>, '_i3': 'import matplotlib.pyplot as plt', 'plt': <module 'matplotlib.pyplot' from '/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py'>, '_i4': 'import seaborn as sns', 'sns': <module 'seaborn' from '/usr/local/lib/python3.10/dist-packages/seaborn/__init__.py'>, '_i5': \"df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')\", 'df':       CustomerId    Surname  CreditScore  Geography  Gender  Age  Tenure  \\\n","0       15634602   Hargrave          619          2       1   42       2   \n","1       15647311       Hill          608          0       1   41       1   \n","2       15619304       Onio          502          2       1   42       8   \n","3       15701354       Boni          699          2       1   39       1   \n","4       15737888   Mitchell          850          0       1   43       2   \n","...          ...        ...          ...        ...     ...  ...     ...   \n","9995    15606229   Obijiaku          771          2       0   39       5   \n","9996    15569892  Johnstone          516          2       0   35      10   \n","9997    15584532        Liu          709          2       1   36       7   \n","9998    15682355  Sabbatini          772          1       0   42       3   \n","9999    15628319     Walker          792          2       1   28       4   \n","\n","        Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0          0.00                0                1                 1   \n","1      83807.86                0                0                 1   \n","2     159660.80                1                1                 0   \n","3          0.00                1                0                 0   \n","4     125510.82                0                1                 1   \n","...         ...              ...              ...               ...   \n","9995       0.00                1                1                 0   \n","9996   57369.61                0                1                 1   \n","9997       0.00                0                0                 1   \n","9998   75075.31                1                1                 0   \n","9999  130142.79                0                1                 0   \n","\n","      Estimated Salary  Churn  Zero Balance  \n","0            101348.88      1             0  \n","1            112542.58      0             1  \n","2            113931.57      1             1  \n","3             93826.63      0             0  \n","4             79084.10      0             1  \n","...                ...    ...           ...  \n","9995          96270.64      0             0  \n","9996         101699.77      0             1  \n","9997          42085.58      1             0  \n","9998          92888.52      1             1  \n","9999          38190.78      0             1  \n","\n","[10000 rows x 14 columns], '_i6': 'df.head()', '_6':    CustomerId   Surname  CreditScore Geography  Gender  Age  Tenure  \\\n","0    15634602  Hargrave          619    France  Female   42       2   \n","1    15647311      Hill          608     Spain  Female   41       1   \n","2    15619304      Onio          502    France  Female   42       8   \n","3    15701354      Boni          699    France  Female   39       1   \n","4    15737888  Mitchell          850     Spain  Female   43       2   \n","\n","     Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","0       0.00                1                1                 1   \n","1   83807.86                1                0                 1   \n","2  159660.80                3                1                 0   \n","3       0.00                2                0                 0   \n","4  125510.82                1                1                 1   \n","\n","   Estimated Salary  Churn  \n","0         101348.88      1  \n","1         112542.58      0  \n","2         113931.57      1  \n","3          93826.63      0  \n","4          79084.10      0  , '_i7': 'df.info()', '_i8': 'df.columns', '_8': Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn'],\n","      dtype='object'), '_i9': \"df.duplicated('CustomerId').sum()\", '_9': 0, '_i10': 'df.info()', '_i11': \"df['Geography'].value_counts()\", '_11': France     5014\n","Germany    2509\n","Spain      2477\n","Name: Geography, dtype: int64, '_i12': \"df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)\", '_i13': \"df['Gender'].value_counts\", '_13': <bound method IndexOpsMixin.value_counts of 0       Female\n","1       Female\n","2       Female\n","3       Female\n","4       Female\n","         ...  \n","9995      Male\n","9996      Male\n","9997    Female\n","9998      Male\n","9999    Female\n","Name: Gender, Length: 10000, dtype: object>, '_i14': \"df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)\", '_i15': \"df['Num Of Products'].value_counts()\", '_15': 1    5084\n","2    4590\n","3     266\n","4      60\n","Name: Num Of Products, dtype: int64, '_i16': \"df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace=True)\", '_i17': \"df['Has Credit Card'].value_counts()\", '_17': 1    7055\n","0    2945\n","Name: Has Credit Card, dtype: int64, '_i18': \"df['Is Active Member'].value_counts()\", '_18': 1    5151\n","0    4849\n","Name: Is Active Member, dtype: int64, '_i19': \"df.loc[(df['Balance']==0),'Churn'].value_counts()\", '_19': 0    3117\n","1     500\n","Name: Churn, dtype: int64, '_i20': \"df['Zero Balance']=np.where(df['Balance']>0,1,0)\", '_i21': \"df['Zero Balance'].hist()\", '_21': <Axes: >, '_i22': \"df.groupby(['Churn','Geography']).count()\", '_22':                  CustomerId  Surname  CreditScore  Gender   Age  Tenure  \\\n","Churn Geography                                                           \n","0     0                2064     2064         2064    2064  2064    2064   \n","      1                1695     1695         1695    1695  1695    1695   \n","      2                4204     4204         4204    4204  4204    4204   \n","1     0                 413      413          413     413   413     413   \n","      1                 814      814          814     814   814     814   \n","      2                 810      810          810     810   810     810   \n","\n","                 Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","Churn Geography                                                                \n","0     0             2064             2064             2064              2064   \n","      1             1695             1695             1695              1695   \n","      2             4204             4204             4204              4204   \n","1     0              413              413              413               413   \n","      1              814              814              814               814   \n","      2              810              810              810               810   \n","\n","                 Estimated Salary  Zero Balance  \n","Churn Geography                                  \n","0     0                      2064          2064  \n","      1                      1695          1695  \n","      2                      4204          4204  \n","1     0                       413           413  \n","      1                       814           814  \n","      2                       810           810  , '_i23': 'df.columns', '_23': Index(['CustomerId', 'Surname', 'CreditScore', 'Geography', 'Gender', 'Age',\n","       'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card',\n","       'Is Active Member', 'Estimated Salary', 'Churn', 'Zero Balance'],\n","      dtype='object'), '_i24': \"x=df.drop(['Surname','Churn'],axis=1)\", 'x':       CustomerId  CreditScore  Geography  Gender  Age  Tenure    Balance  \\\n","0       15634602          619          2       1   42       2       0.00   \n","1       15647311          608          0       1   41       1   83807.86   \n","2       15619304          502          2       1   42       8  159660.80   \n","3       15701354          699          2       1   39       1       0.00   \n","4       15737888          850          0       1   43       2  125510.82   \n","...          ...          ...        ...     ...  ...     ...        ...   \n","9995    15606229          771          2       0   39       5       0.00   \n","9996    15569892          516          2       0   35      10   57369.61   \n","9997    15584532          709          2       1   36       7       0.00   \n","9998    15682355          772          1       0   42       3   75075.31   \n","9999    15628319          792          2       1   28       4  130142.79   \n","\n","      Num Of Products  Has Credit Card  Is Active Member  Estimated Salary  \\\n","0                   0                1                 1         101348.88   \n","1                   0                0                 1         112542.58   \n","2                   1                1                 0         113931.57   \n","3                   1                0                 0          93826.63   \n","4                   0                1                 1          79084.10   \n","...               ...              ...               ...               ...   \n","9995                1                1                 0          96270.64   \n","9996                0                1                 1         101699.77   \n","9997                0                0                 1          42085.58   \n","9998                1                1                 0          92888.52   \n","9999                0                1                 0          38190.78   \n","\n","      Zero Balance  \n","0                0  \n","1                1  \n","2                1  \n","3                0  \n","4                1  \n","...            ...  \n","9995             0  \n","9996             1  \n","9997             0  \n","9998             1  \n","9999             1  \n","\n","[10000 rows x 12 columns], '_i25': \"y=df['Churn']\", 'y': 0       1\n","1       0\n","2       1\n","3       0\n","4       0\n","       ..\n","9995    0\n","9996    0\n","9997    1\n","9998    1\n","9999    0\n","Name: Churn, Length: 10000, dtype: int64, '_i26': 'x.shape,y.shape', '_26': ((10000, 12), (10000,)), '_i27': \"df['Churn'].value_counts()\", '_27': 0    7963\n","1    2037\n","Name: Churn, dtype: int64, '_i28': \"sns.countplot(x='Churn',data=df);\", '_i29': 'x.shape,y.shape', '_29': ((10000, 12), (10000,)), '_i30': '!pip install imblearn', '_exit_code': 0, '_i31': 'from imblearn.under_sampling import RandomUnderSampler', 'RandomUnderSampler': <class 'imblearn.under_sampling._prototype_selection._random_under_sampler.RandomUnderSampler'>, '_i32': 'rus=RandomUnderSampler(random_state=2529)', 'rus': RandomUnderSampler(random_state=2529), '_i33': 'x_rus,y_rus=rus.fit_resample(x,y)', 'x_rus':       CustomerId  CreditScore  Geography  Gender  Age  Tenure    Balance  \\\n","0       15696361          648          1       0   31       7  125681.51   \n","1       15793196          759          2       0   41       9       0.00   \n","2       15703778          728          2       0   33       8  129907.63   \n","3       15724838          599          2       1   43       4       0.00   \n","4       15624528          664          1       0   26       7  116244.14   \n","...          ...          ...        ...     ...  ...     ...        ...   \n","4069    15672754          498          1       0   42       3  152039.70   \n","4070    15768163          655          1       1   46       7  137145.12   \n","4071    15769959          597          2       1   53       4   88381.21   \n","4072    15584532          709          2       1   36       7       0.00   \n","4073    15682355          772          1       0   42       3   75075.31   \n","\n","      Num Of Products  Has Credit Card  Is Active Member  Estimated Salary  \\\n","0                   0                0                 1         129980.93   \n","1                   1                0                 1         190294.12   \n","2                   0                0                 1          36083.96   \n","3                   0                1                 0         170347.10   \n","4                   1                1                 1          95145.14   \n","...               ...              ...               ...               ...   \n","4069                0                1                 1          53445.17   \n","4070                0                1                 0         115146.40   \n","4071                0                1                 0          69384.71   \n","4072                0                0                 1          42085.58   \n","4073                1                1                 0          92888.52   \n","\n","      Zero Balance  \n","0                1  \n","1                0  \n","2                1  \n","3                0  \n","4                1  \n","...            ...  \n","4069             1  \n","4070             1  \n","4071             1  \n","4072             0  \n","4073             1  \n","\n","[4074 rows x 12 columns], 'y_rus': 0       0\n","1       0\n","2       0\n","3       0\n","4       0\n","       ..\n","4069    1\n","4070    1\n","4071    1\n","4072    1\n","4073    1\n","Name: Churn, Length: 4074, dtype: int64, '_i34': 'x_rus.shape,y_rus.shape,x.shape,y.shape', '_34': ((4074, 12), (4074,), (10000, 12), (10000,)), '_i35': 'y.value_counts()', '_35': 0    7963\n","1    2037\n","Name: Churn, dtype: int64, '_i36': 'y_rus.value_counts()', '_36': 0    2037\n","1    2037\n","Name: Churn, dtype: int64, '_i37': \"y_rus.plot(kind='hist')\", '_37': <Axes: ylabel='Frequency'>, '_i38': '!pip show imblearn', '_i39': 'from imblearn.over_sampling import RandomOverSampler', 'RandomOverSampler': <class 'imblearn.over_sampling._random_over_sampler.RandomOverSampler'>, '_i40': 'ros=RandomOverSampler(random_state=2529)', 'ros': RandomOverSampler(random_state=2529), '_i41': 'x_ros,y_ros=ros.fit_resample(x,y)', 'x_ros':        CustomerId  CreditScore  Geography  Gender  Age  Tenure    Balance  \\\n","0        15634602          619          2       1   42       2       0.00   \n","1        15647311          608          0       1   41       1   83807.86   \n","2        15619304          502          2       1   42       8  159660.80   \n","3        15701354          699          2       1   39       1       0.00   \n","4        15737888          850          0       1   43       2  125510.82   \n","...           ...          ...        ...     ...  ...     ...        ...   \n","15921    15611331          511          2       1   46       1       0.00   \n","15922    15766288          586          1       1   36       5  103700.69   \n","15923    15717770          850          0       1   55       7       0.00   \n","15924    15608528          645          2       1   68       9       0.00   \n","15925    15612207          840          1       1   51       1   87779.83   \n","\n","       Num Of Products  Has Credit Card  Is Active Member  Estimated Salary  \\\n","0                    0                1                 1         101348.88   \n","1                    0                0                 1         112542.58   \n","2                    1                1                 0         113931.57   \n","3                    1                0                 0          93826.63   \n","4                    0                1                 1          79084.10   \n","...                ...              ...               ...               ...   \n","15921                0                1                 1         115779.48   \n","15922                0                1                 0         194072.56   \n","15923                0                0                 0         171762.87   \n","15924                1                1                 1         176353.87   \n","15925                0                0                 1          36687.11   \n","\n","       Zero Balance  \n","0                 0  \n","1                 1  \n","2                 1  \n","3                 0  \n","4                 1  \n","...             ...  \n","15921             0  \n","15922             1  \n","15923             0  \n","15924             0  \n","15925             1  \n","\n","[15926 rows x 12 columns], 'y_ros': 0        1\n","1        0\n","2        1\n","3        0\n","4        0\n","        ..\n","15921    1\n","15922    1\n","15923    1\n","15924    1\n","15925    1\n","Name: Churn, Length: 15926, dtype: int64, '_i42': 'x_ros.shape,y_ros.shape,x.shape,y.shape', '_42': ((15926, 12), (15926,), (10000, 12), (10000,)), '_i43': 'y.value_counts()', '_43': 0    7963\n","1    2037\n","Name: Churn, dtype: int64, '_i44': 'y_ros.value_counts()', '_44': 1    7963\n","0    7963\n","Name: Churn, dtype: int64, '_i45': \"y_ros.plot(kind='hist')\", '_45': <Axes: ylabel='Frequency'>, '_i46': 'from sklearn.model_selection import train_test_split', 'train_test_split': <function train_test_split at 0x7a53305ef520>, '_i47': 'x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=25)', 'x_train':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","6625    15610912     0.072515          0       1  0.192079  0.341635   \n","2489    15776824     0.663750          2       0 -1.043723  0.341635   \n","9919    15798084     0.394064          2       0 -1.233846 -1.734575   \n","6964    15569249    -0.767663          2       1  1.522942  0.341635   \n","3467    15771509    -1.161820          1       1  0.287141 -1.388540   \n","...          ...          ...        ...     ...       ...       ...   \n","1175    15721292     0.715613          0       0  0.001956 -0.004400   \n","8447    15792627     1.192751          0       1 -0.568415 -0.004400   \n","2934    15690188    -0.197172          2       0 -0.568415  0.687671   \n","6618    15756301    -0.145309          1       1 -0.948661 -0.696470   \n","8510    15769353    -1.037349          2       1  0.097017  1.033706   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","6625  0.570059                0                1                 0   \n","2489  0.740093                0                1                 1   \n","9919 -1.227615                1                1                 0   \n","6964 -0.512806                1                0                 1   \n","3467  0.352470                1                0                 1   \n","...        ...              ...              ...               ...   \n","1175 -1.227615                1                1                 0   \n","8447  0.128147                0                1                 1   \n","2934 -1.227615                0                1                 1   \n","6618  0.332853                0                0                 1   \n","8510  1.185280                0                0                 0   \n","\n","      Estimated Salary  Zero Balance  \n","6625         -1.455204             1  \n","2489         -0.587612             1  \n","9919          0.090890             0  \n","6964         -0.579157             1  \n","3467         -0.114743             1  \n","...                ...           ...  \n","1175          0.791244             0  \n","8447         -0.552885             1  \n","2934         -0.745541             0  \n","6618          0.548851             1  \n","8510          1.154054             1  \n","\n","[7000 rows x 12 columns], 'x_test':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","3555    15629094    -1.273117          2       1 -0.267742 -1.385208   \n","4078    15690440     0.043812          0       0  0.788882 -1.385208   \n","8445    15678333     0.321602          2       1 -1.228310  0.685873   \n","5939    15709861     1.175547          1       0 -0.844083 -0.349667   \n","5583    15620579     0.445064          0       1 -0.748026  1.031053   \n","...          ...          ...        ...     ...       ...       ...   \n","3341    15640866     0.681699          2       1 -0.940139 -0.694848   \n","4876    15585133     0.054100          0       1 -1.132253  1.031053   \n","8343    15591698     2.029493          1       1  0.980996  1.376233   \n","7913    15649450     1.576799          1       0 -1.420423  0.340693   \n","2190    15609998     0.496506          1       1  1.941563 -0.004487   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","3555  1.291352                0                1                 1   \n","4078 -1.221738                1                1                 1   \n","8445 -1.221738                1                1                 0   \n","5939  0.824402                1                1                 1   \n","5583 -1.221738                1                0                 1   \n","...        ...              ...              ...               ...   \n","3341 -1.221738                0                0                 1   \n","4876 -1.221738                1                0                 0   \n","8343  0.906843                0                1                 0   \n","7913  1.071552                1                1                 0   \n","2190  0.982316                0                1                 0   \n","\n","      Estimated Salary  Zero Balance  \n","3555          0.872162             1  \n","4078          1.693796             0  \n","8445         -0.210120             0  \n","5939         -1.197464             1  \n","5583          0.559787             0  \n","...                ...           ...  \n","3341          0.607972             0  \n","4876         -1.580687             0  \n","8343          1.233724             1  \n","7913          1.489862             1  \n","2190          0.753572             1  \n","\n","[3000 rows x 12 columns], 'y_train': 6625    0\n","2489    0\n","9919    0\n","6964    1\n","3467    0\n","       ..\n","1175    0\n","8447    0\n","2934    1\n","6618    0\n","8510    1\n","Name: Churn, Length: 7000, dtype: int64, 'y_test': 3555    1\n","4078    0\n","8445    0\n","5939    0\n","5583    0\n","       ..\n","3341    0\n","4876    0\n","8343    1\n","7913    0\n","2190    1\n","Name: Churn, Length: 3000, dtype: int64, '_i48': 'x_train_rus,x_test_rus,y_train_rus,y_test_rus=train_test_split(x_rus,y_rus,test_size=0.3,random_state=25)', 'x_train_rus':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","2151    15775318    -0.592469          0       1  0.919891 -0.677165   \n","3960    15814405    -2.345769          2       1  0.451752  1.379214   \n","2417    15758813    -3.038933          1       0 -0.203643 -1.705354   \n","1310    15715643     0.141470          2       0  0.264496  1.036484   \n","1741    15655794    -0.286661          2       0 -0.484526  1.036484   \n","...          ...          ...        ...     ...       ...       ...   \n","3389    15795275    -1.295828          0       1  0.732635 -0.334435   \n","2191    15637876     0.151663          1       1 -0.484526  0.351025   \n","2522    15724223    -1.051181          2       1  1.294402  0.008295   \n","318     15659002     1.201604          2       1  0.358124  0.351025   \n","1156    15716328    -1.499700          2       1 -0.110015 -1.019895   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","2151  1.193595                1                0                 1   \n","3960 -1.328223                0                1                 1   \n","2417  0.457539                1                0                 0   \n","1310 -1.328223                1                1                 1   \n","1741 -1.328223                1                1                 1   \n","...        ...              ...              ...               ...   \n","3389  0.021520                1                0                 0   \n","2191 -0.071025                0                0                 0   \n","2522 -1.328223                0                0                 0   \n","318  -1.328223                1                0                 0   \n","1156 -1.328223                1                0                 0   \n","\n","      Estimated Salary  Zero Balance  \n","2151          1.591539             1  \n","3960         -0.335104             0  \n","2417          0.404643             1  \n","1310          1.302894             0  \n","1741          0.792618             0  \n","...                ...           ...  \n","3389         -0.658212             1  \n","2191         -1.120169             1  \n","2522         -1.568023             0  \n","318           0.814274             0  \n","1156          0.723293             0  \n","\n","[2851 rows x 12 columns], 'x_test_rus':       CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","1577    15685920    -0.516195          0       0 -0.704269 -1.024456   \n","3407    15739578     2.046770          2       0  0.731425  0.355021   \n","122     15597951    -1.823205          2       1  1.592842 -0.334718   \n","3081    15585580     1.495375          1       1  1.018564  1.389629   \n","2776    15594878     0.116888          0       1 -0.034278  0.010152   \n","...          ...          ...        ...     ...       ...       ...   \n","3786    15717191    -1.445397          2       0  0.731425 -1.369326   \n","808     15795933     0.280264          2       1  0.731425 -0.679587   \n","2704    15680752     0.259842          2       1  0.731425 -1.714195   \n","3107    15718465     0.218998          1       0  0.922851 -0.679587   \n","3798    15585985     0.984825          2       0  0.635712  0.010152   \n","\n","       Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","1577  0.324286                0                0                 0   \n","3407  0.761032                0                1                 0   \n","122   0.536681                0                1                 1   \n","3081  1.380683                0                1                 1   \n","2776 -0.856523                0                1                 0   \n","...        ...              ...              ...               ...   \n","3786  0.200626                1                1                 1   \n","808  -1.308156                1                1                 1   \n","2704 -1.308156                0                1                 1   \n","3107  0.250064                0                1                 0   \n","3798  1.349935                0                1                 0   \n","\n","      Estimated Salary  Zero Balance  \n","1577          1.737628             1  \n","3407         -0.608436             1  \n","122          -1.130901             1  \n","3081         -0.660948             1  \n","2776         -0.540731             1  \n","...                ...           ...  \n","3786          0.574688             1  \n","808           1.556370             0  \n","2704         -0.347200             0  \n","3107          1.354006             1  \n","3798          0.952825             1  \n","\n","[1223 rows x 12 columns], 'y_train_rus': 2151    1\n","3960    1\n","2417    1\n","1310    0\n","1741    0\n","       ..\n","3389    1\n","2191    1\n","2522    1\n","318     0\n","1156    0\n","Name: Churn, Length: 2851, dtype: int64, 'y_test_rus': 1577    0\n","3407    1\n","122     0\n","3081    1\n","2776    1\n","       ..\n","3786    1\n","808     0\n","2704    1\n","3107    1\n","3798    1\n","Name: Churn, Length: 1223, dtype: int64, '_i49': 'x_train_ros,x_test_ros,y_train_ros,y_test_ros=train_test_split(x_ros,y_ros,test_size=0.3,random_state=25)', 'x_train_ros':        CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","11986    15669301     1.326396          1       1 -1.137457  0.358716   \n","13023    15769246     1.686690          1       0  1.683454 -1.014320   \n","6914     15808849     0.544044          2       0 -0.103123  0.701976   \n","11542    15645323    -0.197132          2       0  1.307333 -1.014320   \n","69       15755648     0.266103          2       1 -1.889700  1.045235   \n","...           ...          ...        ...     ...       ...       ...   \n","15677    15687001    -0.547132          1       0  1.213302 -1.357580   \n","10383    15699415    -0.320661          2       1  0.461059  0.358716   \n","6618     15756301    -0.135367          1       1 -1.137457 -0.671061   \n","8510     15769353    -1.020661          2       1 -0.103123  1.045235   \n","13444    15737104     0.029338          1       1  0.555090 -1.700839   \n","\n","        Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","11986  1.118089                0                1                 0   \n","13023  0.869403                0                1                 0   \n","6914   1.039611                0                0                 1   \n","11542 -1.328953                0                1                 1   \n","69     0.272039                0                1                 0   \n","...         ...              ...              ...               ...   \n","15677  0.681684                0                1                 1   \n","10383  1.115725                0                1                 0   \n","6618   0.254981                0                0                 1   \n","8510   1.120227                0                0                 0   \n","13444  0.731385                1                1                 1   \n","\n","       Estimated Salary  Zero Balance  \n","11986         -0.659000             1  \n","13023          1.510168             1  \n","6914           0.603876             1  \n","11542          0.099071             0  \n","69            -1.425786             1  \n","...                 ...           ...  \n","15677          0.343617             1  \n","10383          0.349746             1  \n","6618           0.544790             1  \n","8510           1.143369             1  \n","13444         -1.068900             1  \n","\n","[11148 rows x 12 columns], 'x_test_ros':        CustomerId  CreditScore  Geography  Gender       Age    Tenure  \\\n","13786    15673020     0.325996          2       1  0.722422 -0.690847   \n","7759     15806389    -0.986320          1       1  1.281604 -1.372282   \n","14390    15623499    -0.996493          1       0  0.722422  1.353456   \n","2424     15782941    -0.742168          2       0 -0.955122 -1.031565   \n","10632    15576935     0.987240          0       0  0.163241 -1.031565   \n","...           ...          ...        ...     ...       ...       ...   \n","15186    15580914    -1.708602          0       0  0.629225 -1.712999   \n","12834    15600991     0.488763          1       0 -0.955122  0.331304   \n","7995     15803479     0.631185          2       1  2.399966 -1.372282   \n","5869     15734461    -0.854071          1       0 -0.955122 -1.031565   \n","12317    15761950     0.061498          1       1  0.349635  1.353456   \n","\n","        Balance  Num Of Products  Has Credit Card  Is Active Member  \\\n","13786  1.997141                0                0                 1   \n","7759   0.907193                1                0                 1   \n","14390  0.432336                0                0                 0   \n","2424  -1.333864                1                1                 1   \n","10632  1.301597                1                0                 1   \n","...         ...              ...              ...               ...   \n","15186  0.022687                1                0                 1   \n","12834  0.442348                1                1                 1   \n","7995  -1.333864                1                0                 1   \n","5869   0.501889                0                0                 1   \n","12317  0.471257                0                1                 1   \n","\n","       Estimated Salary  Zero Balance  \n","13786         -1.747125             1  \n","7759           0.274859             1  \n","14390          0.457746             1  \n","2424          -0.154484             0  \n","10632         -0.132284             1  \n","...                 ...           ...  \n","15186         -0.989219             1  \n","12834         -1.420454             1  \n","7995          -1.693032             0  \n","5869           1.493930             1  \n","12317          0.917994             1  \n","\n","[4778 rows x 12 columns], 'y_train_ros': 11986    1\n","13023    1\n","6914     0\n","11542    1\n","69       0\n","        ..\n","15677    1\n","10383    1\n","6618     0\n","8510     1\n","13444    1\n","Name: Churn, Length: 11148, dtype: int64, 'y_test_ros': 13786    1\n","7759     1\n","14390    1\n","2424     0\n","10632    1\n","        ..\n","15186    1\n","12834    1\n","7995     0\n","5869     0\n","12317    1\n","Name: Churn, Length: 4778, dtype: int64, '_i50': 'from sklearn.preprocessing import StandardScaler', 'StandardScaler': <class 'sklearn.preprocessing._data.StandardScaler'>, '_i51': 'sc=StandardScaler()', 'sc': StandardScaler(), '_i52': \"x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i53': \"x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i54': \"x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i55': \"x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i56': \"x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i57': \"x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])\", '_i58': 'from sklearn.svm import SVC', 'SVC': <class 'sklearn.svm._classes.SVC'>, '_i59': 'svc=SVC()', 'svc': SVC(), '_i60': 'svc.fit(x_train,y_train)', '_60': SVC(), '_i61': 'y_pred=svc.predict(x_test)', 'y_pred': array([0, 0, 0, ..., 0, 0, 0]), '_i62': 'from sklearn.metrics import confusion_matrix,classification_report', 'confusion_matrix': <function confusion_matrix at 0x7a5330de2710>, 'classification_report': <function classification_report at 0x7a5330de3130>, '_i63': 'confusion_matrix(y_test,y_pred)', '_63': array([[2419,    0],\n","       [ 581,    0]]), '_i64': 'print(classification_report(y_test,y_pred))', '_i65': 'from sklearn.model_selection import GridSearchCV', 'GridSearchCV': <class 'sklearn.model_selection._search.GridSearchCV'>, '_i66': \"param_grid={'C':[0.1,1,10,],\\n                'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", 'param_grid': {'C': [0.1, 1, 10], 'gamma': [1, 0.1, 0.01], 'kernel': ['rbf'], 'class_weight': ['balanced']}, '_i67': 'grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid.fit(x_train,y_train)', 'grid': GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), '_67': GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), '_i68': 'print(grid.best_estimator_)', '_i69': 'grid_predictions=grid.predict(x_test)', 'grid_predictions': array([0, 0, 0, ..., 0, 0, 0]), '_i70': 'confusion_matrix(y_test,grid_predictions)', '_70': array([[2419,    0],\n","       [ 581,    0]]), '_i71': 'print(classification_report(y_test,grid_predictions))', '_i72': 'svc_rus=SVC()', 'svc_rus': SVC(), '_i73': 'svc_rus.fit(x_train_rus,y_train_rus)', '_73': SVC(), '_i74': 'y_pred_rus=svc_rus.predict(x_test_rus)', 'y_pred_rus': array([0, 0, 0, ..., 0, 0, 0]), '_i75': 'confusion_matrix(y_test_rus,y_pred_rus)', '_75': array([[603,   0],\n","       [620,   0]]), '_i76': 'print(classification_report(y_test_rus,y_pred_rus))', '_i77': \"param_grid={'C':[0.1,1,10],\\n            'gamma':[1,0.1,0.01],\\n            'kernel':['rbf'],\\n            'class_weight':['balanced']}\", '_i78': 'from sklearn.model_selection import GridSearchCV', '_i79': 'from sklearn.svm import SVC', '_i80': 'print (locals())', '_i81': 'grid_rus=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\\ngrid_rus.fit(x_train_rus,y_train_rus)', 'grid_rus': GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), '_81': GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2), '_i82': 'print(globals())'}\n"]}],"source":["print(globals())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4XO5928hGhS9"},"outputs":[],"source":["import sys"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":137,"status":"ok","timestamp":1707483984708,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"nyNw9t--GM9v","outputId":"4d0a4c58-f5d4-48c8-d66a-d7a1a675ba55"},"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys(['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', '_abc', 'abc', 'io', '__main__', 'types', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', '_collections_abc', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', '_functools', 'functools', '_locale', 'copyreg', 're', 'warnings', '_stat', 'stat', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_distutils_hack', 'importlib._bootstrap', 'importlib._bootstrap_external', 'importlib', 'importlib._abc', 'contextlib', 'importlib.util', 'importlib.machinery', 'google', 'google.cloud', 'mpl_toolkits', 'sphinxcontrib', 'sitecustomize', 'site', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', '_weakrefset', 'threading', 'fcntl', '_posixsubprocess', 'select', 'collections.abc', 'math', 'selectors', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'weakref', 'copy', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'typing.io', 'typing.re', 'typing', 'traitlets.utils', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.traitlets', 'traitlets._version', 'traitlets.utils.decorators', 'traitlets', 'dataclasses', 'pprint', '_socket', 'array', 'socket', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', '_heapq', 'heapq', '_queue', 'queue', 'logging.handlers', 'socketserver', 'logging.config', 'textwrap', 'traitlets.utils.text', 'gettext', 'argparse', 'traitlets.config.loader', 'traitlets.config.configurable', 'traitlets.utils.nested_update', 'traitlets.config.application', 'traitlets.config', 'pkgutil', 'platform', 'sysconfig', 'urllib', 'urllib.parse', '_sysconfigdata__x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', '__future__', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_bisect', 'bisect', '_random', '_sha512', 'random', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'termios', 'tty', 'pty', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'ntpath', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.mixins', 'asyncio.tasks', 'asyncio.locks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'wcwidth.table_vs16', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.cursor_shapes', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.flush_stdout', 'prompt_toolkit.output.plain_text', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'concurrent.futures.thread', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'gc', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'jupyter_client._version', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', '_cython_0_29_32', 'cython_runtime', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.message', 'zmq.constants', 'zmq.backend.cython.socket', 'zmq.backend.cython._device', 'zmq.backend.cython._poll', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython._version', 'zmq.backend.cython.error', 'zmq.backend.cython.utils', 'zmq.backend.cython', 'zmq.backend', 'zmq.sugar.attrsettr', 'zmq._typing', 'zmq.utils', 'zmq.utils.jsonapi', 'zmq.sugar.poll', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'platformdirs.api', 'platformdirs.version', 'configparser', 'platformdirs.unix', 'platformdirs', 'jupyter_core.utils', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'tornado.speedups', 'tornado.util', 'tornado.escape', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'ipython_genutils.importstring', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'ipykernel.zmqshell', 'importlib.abc', 'distutils.errors', 'distutils.py39compat', 'distutils._functools', 'distutils.sysconfig', 'distutils.command', 'distutils._log', 'distutils.debug', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'pwd', 'grp', 'distutils.archive_util', 'distutils.cmd', 'distutils.config', 'distutils.extension', 'distutils.core', 'distutils.command._framework_compat', 'distutils._collections', 'distutils.command.install', 'distutils.command.install_egg_info', '_distutils_system_mod', 'setuptools._distutils', '_distutils_hack.override', 'setuptools.warnings', '_csv', 'csv', 'importlib.metadata._functools', 'importlib.metadata._text', 'importlib.metadata._adapters', 'importlib.metadata._meta', 'importlib.metadata._collections', 'importlib.metadata._itertools', 'importlib.metadata', 'importlib._adapters', 'importlib._common', 'importlib.resources', 'setuptools._importlib', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools.errors', 'setuptools._vendor.packaging._elffile', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging._tokenizer', 'setuptools.extern.packaging._parser', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools._normalization', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'google.colab._import_hooks._altair', 'google.colab._import_hooks._bokeh', 'google.colab._import_hooks._client_info', 'google.colab._import_hooks._cv2', 'google.colab._import_hooks._generativeai', 'google.colab._import_hooks._pydrive', 'google.colab._import_hooks._pydrive2', 'google.colab._import_hooks', 'google.colab._import_magics', 'google.colab._installation_commands', 'google.colab._interactive_table_helper', 'google.colab._generate_with_variable', 'google.colab._quickchart', 'google.colab._ipython', 'google.colab.errors', 'google.colab._message', 'google.colab.output._js', 'google.colab.output._publish', 'google.colab.output._js_builder', 'google.colab.output._area', 'google.colab.output._tags', 'google.colab.output._util', 'google.colab.output._widgets', 'google.colab.output', 'google.colab._quickchart_hint_button', 'google.colab._quickchart_lib', 'google.colab.autoviz', 'google.colab.widgets._widget', 'google.colab.widgets._grid', 'google.colab.widgets._tabbar', 'google.colab.widgets', 'packaging', 'packaging._structures', 'packaging.version', 'IPython.utils.traitlets', 'google.colab.data_table', 'google.colab._interactive_table_hint_button', 'google.colab._inspector', 'numpy._globals', 'numpy.__config__', 'numpy._distributor_init', 'numpy._version', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat._pep440', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core._machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'PIL._version', 'PIL', 'google.colab._reprs', 'google.colab._shell_customizations', 'google.colab._system_commands', 'google.colab._tensorflow_magics', 'http.server', 'google.colab.files', 'google.colab.auth', 'pexpect.popen_spawn', 'psutil._common', 'psutil._compat', 'psutil._psposix', 'psutil._psutil_linux', 'psutil._psutil_posix', 'psutil._pslinux', 'psutil', 'google.colab.drive', 'gzip', 'socks', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'httplib2.error', 'httplib2.auth', 'httplib2.iri2uri', 'certifi.core', 'certifi', 'httplib2.certs', 'importlib.readers', 'httplib2', 'google.colab.runtime', 'google.colab.snippets', 'google.colab', 'google.colab._history', 'google.colab._pip', 'IPython.core.inputtransformer', 'IPython.core.inputsplitter', 'google.colab._shell', 'google.colab._kernel', 'faulthandler', 'IPython.core.completerlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._version', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib._docstring', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ExifTags', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._deprecate', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._cm', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'matplotlib._fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib.ft2font', 'kiwisolver.exceptions', 'kiwisolver._cext', 'kiwisolver', 'matplotlib._cm_listed', 'matplotlib.cm', 'matplotlib', 'matplotlib.backends', 'matplotlib._pylab_helpers', 'matplotlib.backend_tools', 'matplotlib.artist', 'matplotlib._mathtext_data', 'matplotlib._afm', 'matplotlib.font_manager', 'matplotlib.hatch', 'matplotlib.markers', 'matplotlib.lines', 'matplotlib.patches', 'matplotlib._text_helpers', 'matplotlib.dviread', 'matplotlib._mathtext', 'matplotlib.mathtext', 'matplotlib.texmanager', 'matplotlib.textpath', 'matplotlib.text', 'matplotlib._tight_bbox', 'matplotlib.collections', 'matplotlib.widgets', 'matplotlib.backend_managers', 'matplotlib.backend_bases', 'matplotlib.backends._backend_agg', 'matplotlib.backends.backend_agg', 'matplotlib._blocking_input', 'matplotlib._image', 'matplotlib.image', 'matplotlib.offsetbox', 'matplotlib.units', 'matplotlib.axis', 'matplotlib._tight_layout', 'matplotlib.gridspec', 'matplotlib.spines', 'matplotlib.table', 'matplotlib.axes._base', 'matplotlib.category', 'matplotlib.contour', 'dateutil.rrule', 'matplotlib.dates', 'matplotlib.container', 'matplotlib.legend_handler', 'matplotlib.legend', 'matplotlib.mlab', 'matplotlib.quiver', 'matplotlib.stackplot', 'matplotlib.streamplot', 'matplotlib.tri._triangulation', 'matplotlib.tri._tricontour', 'matplotlib.tri._trifinder', 'matplotlib.tri._tritools', 'matplotlib.tri._triinterpolate', 'matplotlib.tri._tripcolor', 'matplotlib.tri._triplot', 'matplotlib.tri._trirefine', 'matplotlib.tri', 'matplotlib.axes._secondary_axes', 'matplotlib.axes._axes', 'matplotlib.axes', 'matplotlib.projections.geo', 'matplotlib.projections.polar', 'mpl_toolkits.mplot3d.proj3d', 'mpl_toolkits.mplot3d.art3d', 'mpl_toolkits.mplot3d.axis3d', 'mpl_toolkits.mplot3d.axes3d', 'mpl_toolkits.mplot3d', 'matplotlib.projections', 'matplotlib.colorbar', 'matplotlib._layoutgrid', 'matplotlib._constrained_layout', 'matplotlib.layout_engine', 'matplotlib.figure', 'matplotlib_inline.config', 'matplotlib_inline.backend_inline', 'matplotlib_inline', 'matplotlib.style.core', 'matplotlib.style', 'matplotlib.pyplot', 'storemagic', 'debugpy._version', 'debugpy.public_api', 'debugpy', 'google.colab._debugpy_repr', 'google.colab._variable_inspector', 'portpicker', 'google.colab._debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'encodings.latin_1', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_bundle', 'xmlrpc', 'xmlrpc.client', 'xmlrpc.server', '_pydev_bundle._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.unix', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._elffile', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._tokenizer', 'pkg_resources.extern.packaging._parser', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_bundle._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_defaults', '_pydevd_bundle.pydevd_utils', '_pydevd_bundle.pydevd_runpy', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydevd_bundle.pydevconsole_code', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', '_pydevd_bundle.pydevd_concurrency_analyser', '_pydevd_bundle.pydevd_concurrency_analyser.pydevd_thread_wrappers', '_pydevd_bundle.pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.pydevd_line_validation', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugin_pandas_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'encodings.hex_codec', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas._typing', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas.util._exceptions', 'pandas._libs.tslibs.nattype', 'pandas.util.version', 'pandas.compat._optional', 'zoneinfo._tzpath', 'zoneinfo._common', '_zoneinfo', 'zoneinfo', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.dtypes.astype', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.concat', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers.utils', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.version', 'numexpr.utils', 'numexpr.necompiler', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.arraylike', 'pandas.compat.numpy.function', 'pandas.core.missing', 'pandas.core.array_algos.quantile', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.arrow._arrow_utils', 'pandas.core.arrays.arrow.dtype', 'pandas.core.arrays.arrow.array', 'pandas.core.arrays.arrow', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.array_algos.putmask', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.string_', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.period', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.indexes.range', 'pandas.core.tools', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.api', 'pandas.core.indexing', 'pandas.core.sample', 'pandas.core.array_algos.replace', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'mmap', 'tarfile', 'pandas.core.shared_docs', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas._libs.window.indexers', 'pandas.core.indexers.objects', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core._numba', 'pandas.core._numba.executor', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.tools.numeric', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas._libs.tslibs.strptime', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.io.formats.info', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.indexing', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.encoding', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.interchange', 'pandas.core.interchange.dataframe_protocol', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.core.interchange.buffer', 'pandas.core.interchange.utils', 'pandas.core.interchange.column', 'pandas.core.interchange.from_dataframe', 'pandas.api.interchange', 'pandas.api', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.arrow_parser_wrapper', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._version', 'pandas', 'seaborn.external', 'seaborn.external.husl', 'seaborn._core', 'seaborn._core.typing', 'seaborn.external.version', 'seaborn.external.appdirs', 'seaborn.utils', 'seaborn.colors.xkcd_rgb', 'seaborn.colors.crayons', 'seaborn.colors', 'seaborn._compat', 'seaborn.palettes', 'seaborn.rcmod', 'seaborn._core.data', 'seaborn._base', 'fractions', '_statistics', 'statistics', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy', 'scipy.stats._warnings_errors', 'unittest.util', 'unittest.result', 'difflib', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.linalg.lapack_lite', 'numpy.testing._private.utils', 'numpy.testing._private.extbuild', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', '_cython_0_29_36', 'scipy.sparse._sputils', 'scipy.sparse._matrix', 'scipy.sparse._base', 'scipy.sparse._sparsetools', 'scipy._lib._util', 'scipy.sparse._data', 'scipy.sparse._index', 'scipy.sparse._compressed', 'scipy.sparse._csr', 'scipy.sparse._csc', '_csparsetools', 'scipy.sparse._csparsetools', 'scipy.sparse._lil', 'scipy.sparse._dok', 'scipy.sparse._coo', 'scipy.sparse._dia', 'scipy.sparse._bsr', 'scipy.sparse._construct', 'scipy.sparse._extract', 'scipy.sparse._matrix_io', 'scipy.sparse.linalg._isolve._iterative', 'scipy.sparse.linalg._interface', 'scipy.sparse.linalg._isolve.utils', 'scipy._lib.decorator', 'scipy._lib._threadsafety', 'scipy.sparse.linalg._isolve.iterative', 'scipy.sparse.linalg._isolve.minres', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg._misc', 'scipy.linalg.cython_lapack', 'scipy.linalg._cythonized_array_utils', 'scipy.linalg._decomp', 'scipy.linalg._decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg._basic', 'scipy.linalg._decomp_lu_cython', 'scipy.linalg._decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg._decomp_cholesky', 'scipy.linalg._decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg._decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.cython_blas', 'scipy.linalg._matfuncs_expm', 'scipy.linalg._matfuncs', 'scipy.linalg._special_matrices', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg.decomp', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_lu', 'scipy.linalg.decomp_qr', 'scipy.linalg.decomp_svd', 'scipy.linalg.decomp_schur', 'scipy.linalg.basic', 'scipy.linalg.misc', 'scipy.linalg.special_matrices', 'scipy.linalg._flinalg', 'scipy.linalg._flinalg_py', 'scipy.linalg.flinalg', 'scipy.linalg.matfuncs', 'scipy.linalg', 'scipy.sparse.linalg._isolve._gcrotmk', 'scipy.sparse.linalg._isolve.lgmres', 'scipy.sparse.linalg._isolve.lsqr', 'scipy.sparse.linalg._isolve.lsmr', 'scipy.sparse.linalg._isolve.tfqmr', 'scipy.sparse.linalg._isolve', 'scipy.sparse.linalg._dsolve._superlu', 'scipy.sparse.linalg._dsolve.linsolve', 'scipy.sparse.linalg._dsolve._add_newdocs', 'scipy.sparse.linalg._dsolve', 'scipy.sparse.linalg._eigen.arpack._arpack', 'scipy.sparse.linalg._eigen.arpack.arpack', 'scipy.sparse.linalg._eigen.arpack', 'scipy.sparse.linalg._eigen.lobpcg.lobpcg', 'scipy.sparse.linalg._eigen.lobpcg', 'scipy.sparse.linalg._eigen._svds', 'scipy.sparse.linalg._eigen', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._matfuncs', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse.base', 'scipy.sparse.bsr', 'scipy.sparse.compressed', 'scipy.sparse.construct', 'scipy.sparse.coo', 'scipy.sparse.csc', 'scipy.sparse.csr', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse.dok', 'scipy.sparse.extract', 'scipy.sparse.lil', 'scipy.sparse.sparsetools', 'scipy.sparse.sputils', 'scipy.sparse', 'scipy.spatial._ckdtree', 'scipy.spatial._kdtree', 'scipy._lib.messagestream', 'scipy.spatial._qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special._sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special._specfun', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special._orthogonal', 'scipy.special._spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special._add_newdocs', 'scipy.special.add_newdocs', 'scipy.special.basic', 'scipy.special.orthogonal', 'scipy.special.specfun', 'scipy.special.sf_error', 'scipy.special.spfun_stats', 'scipy.special', 'scipy.spatial._distance_pybind', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.spatial.ckdtree', 'scipy.spatial.kdtree', 'scipy.spatial.qhull', 'scipy.constants._codata', 'scipy.constants._constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform._rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage._filters', 'scipy.ndimage._fourier', 'scipy.ndimage._interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage._morphology', 'scipy.ndimage._measurements', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', 'scipy.ndimage.measurements', 'scipy.ndimage.morphology', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize._minpack2', 'scipy.optimize._linesearch', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize._optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize._lbfgsb_py', '_moduleTNC', 'scipy.optimize._moduleTNC', 'scipy.optimize._tnc', 'scipy.optimize._cobyla', 'scipy.optimize._cobyla_py', 'scipy.optimize._slsqp', 'scipy.optimize._slsqp_py', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize._minpack_py', 'scipy.optimize._spectral', 'scipy.optimize._nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize._zeros_py', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._highs', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._linprog_highs', 'scipy.linalg._interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg.interpolative', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog_doc', 'scipy.optimize._linprog', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib._vertex', 'scipy.optimize._shgo_lib._complex', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.optimize._direct', 'scipy.optimize._direct_py', 'scipy.optimize._milp', 'scipy.optimize.cobyla', 'scipy.optimize.lbfgsb', 'scipy.optimize.linesearch', 'scipy.optimize.minpack', 'scipy.optimize.minpack2', 'scipy.optimize.moduleTNC', 'scipy.optimize.nonlin', 'scipy.optimize.optimize', 'scipy.optimize.slsqp', 'scipy.optimize.tnc', 'scipy.optimize.zeros', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate._odepack_py', 'scipy.integrate._quadpack', 'scipy.integrate._quadpack_py', 'scipy.integrate._vode', 'scipy.integrate._dop', 'scipy.integrate._lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate.dop', 'scipy.integrate.lsoda', 'scipy.integrate.vode', 'scipy.integrate.odepack', 'scipy.integrate.quadpack', 'scipy.integrate', 'scipy._lib._finite_differences', 'scipy.stats._constants', 'scipy.stats._censored_data', 'scipy.stats._distn_infrastructure', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats.beta_ufunc', 'scipy.stats._boost.beta_ufunc', 'scipy.stats.binom_ufunc', 'scipy.stats._boost.binom_ufunc', 'scipy.stats.nbinom_ufunc', 'scipy.stats._boost.nbinom_ufunc', 'scipy.stats.hypergeom_ufunc', 'scipy.stats._boost.hypergeom_ufunc', 'scipy.stats.ncf_ufunc', 'scipy.stats._boost.ncf_ufunc', 'scipy.stats.ncx2_ufunc', 'scipy.stats._boost.ncx2_ufunc', 'scipy.stats.nct_ufunc', 'scipy.stats._boost.nct_ufunc', 'scipy.stats.skewnorm_ufunc', 'scipy.stats._boost.skewnorm_ufunc', 'scipy.stats.invgauss_ufunc', 'scipy.stats._boost.invgauss_ufunc', 'scipy.stats._boost', 'scipy.stats._continuous_distns', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate._fitpack_py', 'scipy.interpolate._polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.interpnd', 'scipy.interpolate._interpolate', 'scipy.interpolate._fitpack2', 'scipy.interpolate._rbf', 'scipy.interpolate._rbfinterp_pythran', 'scipy.interpolate._rbfinterp', 'scipy.interpolate._cubic', 'scipy.interpolate._ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate._rgi_cython', 'scipy.interpolate._rgi', 'scipy.interpolate.fitpack', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpolate', 'scipy.interpolate.ndgriddata', 'scipy.interpolate.polyint', 'scipy.interpolate.rbf', 'scipy.interpolate', 'scipy.stats._biasedurn', 'scipy.stats._discrete_distns', 'scipy.stats._levy_stable.levyst', 'scipy.stats._levy_stable', 'scipy.stats._entropy', 'scipy.stats.distributions', 'scipy._lib._bunch', 'scipy.stats._stats_pythran', 'scipy.stats._stats_mstats_common', 'scipy.stats._mstats_basic', 'scipy.stats._common', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.fft._fftlog_multimethods', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy.stats._hypotests', 'scipy._lib._docscrape', 'scipy.stats._axis_nan_policy', 'scipy.stats._resampling', 'scipy.stats._binomtest', 'scipy.stats._stats_py', 'scipy.stats._variation', 'scipy.stats._statlib', 'scipy.stats._fit', 'scipy.stats._relative_risk', 'scipy.stats._crosstab', 'scipy.stats._odds_ratio', 'scipy.stats.contingency', 'scipy.stats._morestats', 'scipy.stats._sobol', 'scipy.stats._qmc_cy', 'scipy.stats._qmc', 'scipy.stats._multicomp', 'scipy.stats._binned_statistic', 'scipy.stats._mvn', 'scipy.stats._kde', 'scipy.stats._mstats_extras', 'scipy.stats.mstats', 'scipy.stats.qmc', 'scipy.stats._covariance', 'scipy.stats._rcont.rcont', 'scipy.stats._rcont', 'scipy.stats._qmvnt', 'scipy.stats._multivariate', 'scipy.stats._rvs_sampling', 'scipy.stats._page_trend_test', 'scipy.stats._mannwhitneyu', 'scipy.stats._sensitivity_analysis', 'scipy.stats._survival', 'scipy.stats.biasedurn', 'scipy.stats.kde', 'scipy.stats.morestats', 'scipy.stats.mstats_basic', 'scipy.stats.mstats_extras', 'scipy.stats.mvn', 'scipy.stats.statlib', 'scipy.stats.stats', 'scipy.stats', 'seaborn.algorithms', 'seaborn._statistics', 'seaborn.external.docscrape', 'seaborn._docstrings', 'seaborn.axisgrid', 'seaborn.relational', 'statsmodels.tools.data', 'statsmodels.tools.validation.validation', 'statsmodels.tools.validation', 'statsmodels.tools.tools', 'statsmodels.tools._testing', 'statsmodels.tools', 'statsmodels.compat.python', 'statsmodels.compat', 'statsmodels.compat.pandas', 'patsy.version', 'patsy.origin', 'patsy.compat', 'patsy.util', 'patsy.infix_parser', 'patsy.tokens', 'patsy.parse_formula', 'patsy.constraint', 'patsy.contrasts', 'patsy.categorical', 'patsy.state', 'patsy.splines', 'patsy.mgcv_cubic_splines', 'patsy.builtins', 'patsy.eval', 'patsy.desc', 'patsy.design_info', 'patsy.redundancy', 'patsy.missing', 'patsy.build', 'patsy.highlevel', 'patsy.user_util', 'patsy', 'statsmodels.compat.patsy', 'statsmodels._version', 'statsmodels', 'seaborn.regression', 'seaborn._stats', 'seaborn._core.rules', 'seaborn._core.groupby', 'seaborn._core.scales', 'seaborn._stats.base', 'seaborn._stats.density', 'seaborn.categorical', 'seaborn._stats.counting', 'seaborn.external.kde', 'seaborn.distributions', 'scipy.cluster._vq', 'scipy.cluster.vq', 'scipy.cluster._hierarchy', 'scipy.cluster._optimal_leaf_ordering', 'scipy._lib._disjoint_set', 'scipy.cluster.hierarchy', 'scipy.cluster', 'seaborn.cm', 'seaborn.matrix', 'seaborn.miscplot', 'ipywidgets._version', 'ipywidgets.widgets.widget', 'ipywidgets.widgets.util', 'ipywidgets.widgets.trait_types', 'ipywidgets.widgets.widget_layout', 'ipywidgets.widgets.widget_style', 'ipywidgets.widgets.domwidget', 'ipywidgets.widgets.valuewidget', 'ipywidgets.widgets.widget_core', 'ipywidgets.widgets.widget_description', 'ipywidgets.widgets.widget_bool', 'ipywidgets.widgets.widget_button', 'ipywidgets.widgets.docutils', 'ipywidgets.widgets.widget_box', 'ipywidgets.widgets.widget_int', 'ipywidgets.widgets.widget_float', 'ipywidgets.widgets.widget_color', 'ipywidgets.widgets.widget_date', 'ipywidgets.widgets.widget_output', 'ipywidgets.widgets.widget_selection', 'ipywidgets.widgets.widget_selectioncontainer', 'ipywidgets.widgets.widget_string', 'ipywidgets.widgets.widget_controller', 'ipywidgets.widgets.interaction', 'ipywidgets.widgets.widget_link', 'ipywidgets.widgets.widget_media', 'ipywidgets.widgets.widget_templates', 'ipywidgets.widgets.widget_upload', 'ipywidgets.widgets', 'ipywidgets', 'seaborn.widgets', 'seaborn', 'pandas.io.formats.string', 'pandas.io.formats.html', 'pandas.plotting._matplotlib.compat', 'pandas.plotting._matplotlib.converter', 'pandas.plotting._matplotlib.style', 'pandas.plotting._matplotlib.tools', 'pandas.plotting._matplotlib.misc', 'pandas.plotting._matplotlib.groupby', 'pandas.plotting._matplotlib.timeseries', 'pandas.plotting._matplotlib.core', 'pandas.plotting._matplotlib.boxplot', 'pandas.plotting._matplotlib.hist', 'pandas.plotting._matplotlib', 'PIL.BmpImagePlugin', 'PIL.GifImagePlugin', 'PIL.ImageOps', 'PIL.TiffImagePlugin', 'PIL.JpegPresets', 'PIL.JpegImagePlugin', 'PIL.PpmImagePlugin', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'sklearn.utils.class_weight', 'joblib.hashing', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.synchronize', 'joblib.externals.loky.backend.process', 'multiprocessing.connection', 'multiprocessing.queues', 'concurrent.futures.process', 'joblib.externals.loky.backend.context', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._posix_reduction', 'joblib.externals.cloudpickle.compat', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'joblib.externals.loky.backend.queues', 'joblib.externals.loky.backend.utils', 'joblib.externals.loky.initializers', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib._utils', 'joblib.parallel', 'joblib._cloudpickle_wrapper', 'joblib', 'sklearn.utils._joblib', 'sklearn.exceptions', 'sklearn.utils.deprecation', 'sklearn.utils.discovery', 'ctypes.util', 'threadpoolctl', 'sklearn.externals', 'sklearn.externals._packaging', 'sklearn.externals._packaging._structures', 'sklearn.externals._packaging.version', 'sklearn.utils.fixes', 'sklearn.utils._estimator_html_repr', 'sklearn.utils._array_api', '_cython_0_29_33', 'sklearn.utils._isfinite', 'sklearn.utils.validation', 'sklearn.utils._bunch', 'sklearn.utils', 'sklearn.utils._available_if', 'sklearn.utils._set_output', 'sklearn.utils._tags', 'sklearn.utils._param_validation', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.utils.metaestimators', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.utils._mask', 'sklearn.utils._encode', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._discretization', 'sklearn.utils.stats', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.preprocessing._polynomial', 'sklearn.preprocessing', 'imblearn.utils._docstring', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.utils._typedefs', 'sklearn.utils._readonly_array_wrapper', 'sklearn.metrics._dist_metrics', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils.parallel', 'sklearn.metrics._pairwise_distances_reduction._datasets_pair', 'sklearn.utils._cython_blas', 'sklearn.metrics._pairwise_distances_reduction._base', 'sklearn.metrics._pairwise_distances_reduction._middle_term_computer', 'sklearn.utils._heap', 'sklearn.utils._sorting', 'sklearn.metrics._pairwise_distances_reduction._argkmin', 'sklearn.utils._vector_sentinel', 'sklearn.metrics._pairwise_distances_reduction._radius_neighbors', 'sklearn.metrics._pairwise_distances_reduction._dispatcher', 'sklearn.metrics._pairwise_distances_reduction', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.det_curve', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics._plot.regression', 'sklearn.metrics', 'sklearn.neighbors._partition_nodes', 'sklearn.neighbors._ball_tree', 'sklearn.neighbors._kd_tree', 'sklearn.neighbors._distance_metric', 'sklearn.neighbors._base', 'sklearn.neighbors._unsupervised', 'sklearn.neighbors._graph', 'sklearn.neighbors._classification', 'sklearn.neighbors._regression', 'sklearn.neighbors._nearest_centroid', 'sklearn.neighbors._kde', 'sklearn.neighbors._lof', 'sklearn.decomposition._cdnmf_fast', 'sklearn.decomposition._nmf', 'sklearn.decomposition._base', 'sklearn.utils._arpack', 'sklearn.decomposition._pca', 'sklearn.decomposition._incremental_pca', 'sklearn.decomposition._kernel_pca', 'sklearn.utils._random', 'sklearn.utils._seq_dataset', 'sklearn.linear_model._base', 'sklearn.linear_model._bayes', 'sklearn.utils.arrayfuncs', 'sklearn.model_selection._split', 'sklearn.model_selection._validation', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection._plot', 'sklearn.model_selection', 'sklearn.linear_model._least_angle', 'sklearn.linear_model._cd_fast', 'sklearn.linear_model._coordinate_descent', 'sklearn._loss._loss', 'sklearn._loss.link', 'sklearn._loss.loss', 'sklearn._loss', 'sklearn.utils.optimize', 'sklearn.linear_model._linear_loss', 'sklearn.linear_model._glm._newton_solver', 'sklearn._loss.glm_distribution', 'sklearn.linear_model._glm.glm', 'sklearn.linear_model._glm', 'sklearn.linear_model._huber', 'sklearn.utils._weight_vector', 'sklearn.linear_model._sgd_fast', 'sklearn.linear_model._stochastic_gradient', 'sklearn.linear_model._sag_fast', 'sklearn.linear_model._sag', 'sklearn.linear_model._ridge', 'sklearn.svm._libsvm', 'sklearn.svm._liblinear', 'sklearn.svm._libsvm_sparse', 'sklearn.svm._base', 'sklearn.svm._classes', 'sklearn.svm._bounds', 'sklearn.svm', 'sklearn.linear_model._logistic', 'sklearn.linear_model._omp', 'sklearn.linear_model._passive_aggressive', 'sklearn.linear_model._perceptron', 'sklearn.linear_model._quantile', 'sklearn.linear_model._ransac', 'sklearn.linear_model._theil_sen', 'sklearn.linear_model', 'sklearn.decomposition._dict_learning', 'sklearn.decomposition._sparse_pca', 'sklearn.decomposition._truncated_svd', 'sklearn.decomposition._fastica', 'sklearn.decomposition._factor_analysis', 'sklearn.decomposition._online_lda_fast', 'sklearn.decomposition._lda', 'sklearn.decomposition', 'sklearn.neighbors._nca', 'sklearn.neighbors', 'imblearn.utils._validation', 'imblearn.utils', 'imblearn.utils.fixes', 'imblearn.utils._param_validation', 'imblearn.base', 'imblearn.over_sampling.base', 'imblearn.over_sampling._adasyn', 'imblearn.over_sampling._random_over_sampler', 'imblearn.metrics._classification', 'imblearn.metrics', 'imblearn.metrics.pairwise', 'imblearn.over_sampling._smote.base', 'sklearn.manifold._locally_linear', 'sklearn.utils.graph', 'sklearn.manifold._isomap', 'sklearn._isotonic', 'sklearn.isotonic', 'sklearn.manifold._mds', 'sklearn.manifold._spectral_embedding', 'sklearn.manifold._utils', 'sklearn.tree._utils', 'sklearn.tree._tree', 'sklearn.tree._splitter', 'sklearn.tree._criterion', 'sklearn.tree._classes', 'sklearn.tree._reingold_tilford', 'sklearn.tree._export', 'sklearn.tree', 'sklearn.neighbors._quad_tree', 'sklearn.manifold._barnes_hut_tsne', 'sklearn.manifold._t_sne', 'sklearn.manifold', 'sklearn.cluster._k_means_common', 'sklearn.cluster._k_means_minibatch', 'sklearn.cluster._k_means_lloyd', 'sklearn.cluster._k_means_elkan', 'sklearn.cluster._kmeans', 'sklearn.cluster._spectral', 'sklearn.cluster._mean_shift', 'sklearn.cluster._affinity_propagation', 'sklearn.utils._fast_dict', 'sklearn.cluster._hierarchical_fast', 'sklearn.cluster._feature_agglomeration', 'sklearn.cluster._agglomerative', 'sklearn.cluster._bisect_k_means', 'sklearn.cluster._dbscan_inner', 'sklearn.cluster._dbscan', 'sklearn.cluster._optics', 'sklearn.cluster._bicluster', 'sklearn.cluster._birch', 'sklearn.cluster', 'imblearn.over_sampling._smote.cluster', 'imblearn.over_sampling._smote.filter', 'imblearn.over_sampling._smote', 'imblearn.over_sampling', 'imblearn.under_sampling.base', 'imblearn.under_sampling._prototype_generation._cluster_centroids', 'imblearn.under_sampling._prototype_generation', 'imblearn.under_sampling._prototype_selection._condensed_nearest_neighbour', 'imblearn.under_sampling._prototype_selection._edited_nearest_neighbours', 'sklearn.ensemble._base', 'sklearn.ensemble._forest', 'sklearn.ensemble._bagging', 'sklearn.ensemble._iforest', 'sklearn.ensemble._weight_boosting', 'sklearn.ensemble._gradient_boosting', 'sklearn.dummy', 'sklearn.ensemble._gb_losses', 'sklearn.ensemble._gb', 'sklearn.ensemble._voting', 'sklearn.ensemble._stacking', 'sklearn.ensemble._hist_gradient_boosting', 'sklearn.ensemble._hist_gradient_boosting.common', 'sklearn.ensemble._hist_gradient_boosting._gradient_boosting', 'sklearn.ensemble._hist_gradient_boosting._binning', 'sklearn.ensemble._hist_gradient_boosting._bitset', 'sklearn.ensemble._hist_gradient_boosting.binning', 'sklearn.ensemble._hist_gradient_boosting.splitting', 'sklearn.ensemble._hist_gradient_boosting.histogram', 'sklearn.ensemble._hist_gradient_boosting._predictor', 'sklearn.ensemble._hist_gradient_boosting.predictor', 'sklearn.ensemble._hist_gradient_boosting.utils', 'sklearn.ensemble._hist_gradient_boosting.grower', 'sklearn.ensemble._hist_gradient_boosting.gradient_boosting', 'sklearn.ensemble', 'imblearn.under_sampling._prototype_selection._instance_hardness_threshold', 'imblearn.under_sampling._prototype_selection._nearmiss', 'imblearn.under_sampling._prototype_selection._neighbourhood_cleaning_rule', 'imblearn.under_sampling._prototype_selection._tomek_links', 'imblearn.under_sampling._prototype_selection._one_sided_selection', 'imblearn.under_sampling._prototype_selection._random_under_sampler', 'imblearn.under_sampling._prototype_selection', 'imblearn.under_sampling', 'imblearn.combine._smote_enn', 'imblearn.combine._smote_tomek', 'imblearn.combine', 'sklearn.pipeline', 'imblearn.pipeline', 'imblearn.utils._available_if', 'imblearn.ensemble._common', 'imblearn.ensemble._bagging', 'imblearn.ensemble._easy_ensemble', 'imblearn.ensemble._forest', 'imblearn.ensemble._weight_boosting', 'imblearn.ensemble', 'imblearn.exceptions', 'imblearn.tensorflow._generator', 'imblearn.tensorflow', 'imblearn._version', 'imblearn.utils._show_versions', 'imblearn', 'sklearn.utils._pprint'])\n"]}],"source":["print(sys.modules.keys())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":104,"status":"ok","timestamp":1707483984711,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"1rogrwY5g-hF","outputId":"d460cd85-31ac-4f19-ff69-eb8a4ca81685"},"outputs":[{"output_type":"stream","name":"stdout","text":["SVC(C=1, class_weight='balanced', gamma=1)\n"]}],"source":["print(grid_rus.best_estimator_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kR-IxEGWKPwR"},"outputs":[],"source":["grid_predictions_rus=grid_rus.predict(x_test_rus)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":72,"status":"ok","timestamp":1707483984716,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"FF-ovcdEKiy8","outputId":"a26eaaf3-78b9-414c-84e5-b8c617e4de04"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[602,   1],\n","       [620,   0]])"]},"metadata":{},"execution_count":87}],"source":["confusion_matrix(y_test_rus,grid_predictions_rus)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":64,"status":"ok","timestamp":1707483984717,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"D-eFRpgZKugy","outputId":"7bc1a129-061e-4579-d176-5cc93808341a"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.49      1.00      0.66       603\n","           1       0.00      0.00      0.00       620\n","\n","    accuracy                           0.49      1223\n","   macro avg       0.25      0.50      0.33      1223\n","weighted avg       0.24      0.49      0.33      1223\n","\n"]}],"source":["print(classification_report(y_test_rus,grid_predictions_rus))"]},{"cell_type":"markdown","metadata":{"id":"PZz-X1crK-dX"},"source":["Model With Random Over Sampling"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Tfq5sa3zLFOQ"},"outputs":[],"source":["svc_ros=SVC()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"executionInfo":{"elapsed":7481,"status":"ok","timestamp":1707483992145,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"jzDrdlPyLJrv","outputId":"ef77cfec-acc6-49dc-bddb-abeac4533c0e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC()"],"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":90}],"source":["svc_ros.fit(x_train_ros,y_train_ros)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1yrNylIzLSCw"},"outputs":[],"source":["y_pred_ros=svc_ros.predict(x_test_ros)"]},{"cell_type":"markdown","metadata":{"id":"O8CMA8nBLb_Z"},"source":["Model Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1707483996898,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"m7c5AgTbLg2f","outputId":"f6a39dd4-c814-41f3-ad11-1b30ce54ef1e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[   0, 2426],\n","       [   0, 2352]])"]},"metadata":{},"execution_count":92}],"source":["confusion_matrix(y_test_ros,y_pred_ros)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36,"status":"ok","timestamp":1707483996898,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"},"user_tz":-330},"id":"U9rn6E8DLrK9","outputId":"5e002205-7412-4788-b475-1c9f1821098c"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.00      0.00      0.00      2426\n","           1       0.49      1.00      0.66      2352\n","\n","    accuracy                           0.49      4778\n","   macro avg       0.25      0.50      0.33      4778\n","weighted avg       0.24      0.49      0.32      4778\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(classification_report(y_test_ros,y_pred_ros))"]},{"cell_type":"markdown","metadata":{"id":"drAS11XFL3y6"},"source":["HyperParameter Tunning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6TRE4fKrMDW5"},"outputs":[],"source":["param_grid={'C':[0.1,1,10],\n","            'gamma':[1,0.1,0.01],\n","            'kernel':['rbf'],\n","            'class_weight':['balanced']}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"OXO0pSMhNqZc","executionInfo":{"status":"ok","timestamp":1707484086693,"user_tz":-330,"elapsed":89818,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"883ddf22-42e9-40ce-fff1-052080cbe950"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 9 candidates, totalling 18 fits\n","[CV] END ..C=0.1, class_weight=balanced, gamma=1, kernel=rbf; total time=   3.8s\n","[CV] END ..C=0.1, class_weight=balanced, gamma=1, kernel=rbf; total time=   3.8s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   5.0s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   3.8s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   4.1s\n","[CV] END C=0.1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   5.0s\n","[CV] END ....C=1, class_weight=balanced, gamma=1, kernel=rbf; total time=   4.0s\n","[CV] END ....C=1, class_weight=balanced, gamma=1, kernel=rbf; total time=   4.0s\n","[CV] END ..C=1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   4.8s\n","[CV] END ..C=1, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   3.8s\n","[CV] END .C=1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   3.8s\n","[CV] END .C=1, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   4.7s\n","[CV] END ...C=10, class_weight=balanced, gamma=1, kernel=rbf; total time=   3.4s\n","[CV] END ...C=10, class_weight=balanced, gamma=1, kernel=rbf; total time=   3.3s\n","[CV] END .C=10, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   4.9s\n","[CV] END .C=10, class_weight=balanced, gamma=0.1, kernel=rbf; total time=   3.3s\n","[CV] END C=10, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   3.5s\n","[CV] END C=10, class_weight=balanced, gamma=0.01, kernel=rbf; total time=   4.6s\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={'C': [0.1, 1, 10], 'class_weight': ['balanced'],\n","                         'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']},\n","             verbose=2)"],"text/html":["<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [0.1, 1, 10], &#x27;class_weight&#x27;: [&#x27;balanced&#x27;],\n","                         &#x27;gamma&#x27;: [1, 0.1, 0.01], &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n","             verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=2, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [0.1, 1, 10], &#x27;class_weight&#x27;: [&#x27;balanced&#x27;],\n","                         &#x27;gamma&#x27;: [1, 0.1, 0.01], &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n","             verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":95}],"source":["grid_ros=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)\n","grid_ros.fit(x_train_ros,y_train_ros)"]},{"cell_type":"code","source":["print(grid_ros.best_estimator_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w5lFXvIF_Fhv","executionInfo":{"status":"ok","timestamp":1707484183135,"user_tz":-330,"elapsed":1257,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"bc89c14c-5c66-4a3f-f06f-97851aefc532"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SVC(C=1, class_weight='balanced', gamma=1)\n"]}]},{"cell_type":"code","source":["grid_predictions_ros=grid_ros.predict(x_test_ros)"],"metadata":{"id":"EkWsoAHM_PPS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["confusion_matrix(y_test_ros,grid_predictions_ros)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CKhnB-2P_h7_","executionInfo":{"status":"ok","timestamp":1707484296419,"user_tz":-330,"elapsed":10,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"fd6a0310-ef69-47d6-a2dd-0ab89a5d022b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2426,    0],\n","       [ 151, 2201]])"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["print(classification_report(y_test_ros,grid_predictions_ros))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0t3nq8KD_rEl","executionInfo":{"status":"ok","timestamp":1707484340884,"user_tz":-330,"elapsed":939,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"57cac693-5cd9-43ba-b66d-1308fe78c3e9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.94      1.00      0.97      2426\n","           1       1.00      0.94      0.97      2352\n","\n","    accuracy                           0.97      4778\n","   macro avg       0.97      0.97      0.97      4778\n","weighted avg       0.97      0.97      0.97      4778\n","\n"]}]},{"cell_type":"code","source":["print(classification_report(y_test,y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0u_OltRa_9A4","executionInfo":{"status":"ok","timestamp":1707484399486,"user_tz":-330,"elapsed":13,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"c86a4387-7bdc-44b7-a02d-5fb2520a9085"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.81      1.00      0.89      2419\n","           1       0.00      0.00      0.00       581\n","\n","    accuracy                           0.81      3000\n","   macro avg       0.40      0.50      0.45      3000\n","weighted avg       0.65      0.81      0.72      3000\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["print(classification_report(y_pred,grid_predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P7Sp-EGAAEDg","executionInfo":{"status":"ok","timestamp":1707484431827,"user_tz":-330,"elapsed":10,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"b630a720-3551-4a09-a1a0-c0bf8ed6b35c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00      3000\n","\n","    accuracy                           1.00      3000\n","   macro avg       1.00      1.00      1.00      3000\n","weighted avg       1.00      1.00      1.00      3000\n","\n"]}]},{"cell_type":"code","source":["print(classification_report(y_test_rus,y_pred_rus))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LsBTJe8uAL6T","executionInfo":{"status":"ok","timestamp":1707484464852,"user_tz":-330,"elapsed":1305,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"b1a661ac-e5e2-459d-f248-053491978251"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.49      1.00      0.66       603\n","           1       0.00      0.00      0.00       620\n","\n","    accuracy                           0.49      1223\n","   macro avg       0.25      0.50      0.33      1223\n","weighted avg       0.24      0.49      0.33      1223\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["print(classification_report(y_test_rus,grid_predictions_rus))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YBM-sHxvAX3i","executionInfo":{"status":"ok","timestamp":1707484524895,"user_tz":-330,"elapsed":653,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"c7766549-4d0b-4dc6-cb06-bced67da7dc7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.49      1.00      0.66       603\n","           1       0.00      0.00      0.00       620\n","\n","    accuracy                           0.49      1223\n","   macro avg       0.25      0.50      0.33      1223\n","weighted avg       0.24      0.49      0.33      1223\n","\n"]}]},{"cell_type":"code","source":["print(classification_report(y_test_ros,y_pred_ros))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"odozsduMAi-1","executionInfo":{"status":"ok","timestamp":1707484574563,"user_tz":-330,"elapsed":14,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"8d1ecb64-d17c-4cb1-9d14-6eef9c15ca64"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.00      0.00      0.00      2426\n","           1       0.49      1.00      0.66      2352\n","\n","    accuracy                           0.49      4778\n","   macro avg       0.25      0.50      0.33      4778\n","weighted avg       0.24      0.49      0.32      4778\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["print(classification_report(y_test_ros,grid_predictions_ros))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ukb-wE6mAua4","executionInfo":{"status":"ok","timestamp":1707484611348,"user_tz":-330,"elapsed":619,"user":{"displayName":"K.saisusmitha Susmitha","userId":"15607639206571508171"}},"outputId":"a7418444-4aea-48f1-899f-6cce443596f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.94      1.00      0.97      2426\n","           1       1.00      0.94      0.97      2352\n","\n","    accuracy                           0.97      4778\n","   macro avg       0.97      0.97      0.97      4778\n","weighted avg       0.97      0.97      0.97      4778\n","\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOSOoIhmEPCQAvLwQlXiNZ3"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}